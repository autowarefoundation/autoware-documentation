{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Autoware Documentation # About Autoware # Autoware is the world\u2019s leading open-source software project for autonomous driving. Autoware is built on Robot Operating System (ROS) and enables commercial deployment of autonomous driving in a broad range of vehicles and applications. Please see here for more details. Getting started # Installation pages explain the installation steps of Autoware and related tools. Tutorials pages explain several tutorials that you should try after installation. How-to guides pages explain advanced topics that you should read after you get used to Autoware. Design pages explain the design concept of Autoware. Contributing pages explain how to contribute to Autoware. Support pages explain several support resources.","title":"Introduction"},{"location":"#autoware-documentation","text":"","title":"Autoware Documentation"},{"location":"#about-autoware","text":"Autoware is the world\u2019s leading open-source software project for autonomous driving. Autoware is built on Robot Operating System (ROS) and enables commercial deployment of autonomous driving in a broad range of vehicles and applications. Please see here for more details.","title":"About Autoware"},{"location":"#getting-started","text":"Installation pages explain the installation steps of Autoware and related tools. Tutorials pages explain several tutorials that you should try after installation. How-to guides pages explain advanced topics that you should read after you get used to Autoware. Design pages explain the design concept of Autoware. Contributing pages explain how to contribute to Autoware. Support pages explain several support resources.","title":"Getting started"},{"location":"contributing/","text":"Contributing # Thank you for your interest in contributing! Autoware is supported by people like you, and all types and sizes of contribution are welcome. As a contributor, here are the guidelines that we would like you to follow for Autoware and its associated repositories. Code of Conduct What should I know before I get started? Autoware concepts Contributing to open source projects How can I get help? How can I contribute? Participate in discussions Join a working group Report bugs Make a pull request Like Autoware itself, these guidelines are being actively developed and suggestions for improvement are always welcome! Guideline changes can be proposed by creating a discussion in the Ideas category . Code of Conduct # To ensure the Autoware community stays open and inclusive, please follow our code of conduct . If you believe that someone in the community has violated the code of conduct, please make a report by emailing conduct@autoware.org. What should I know before I get started? # Autoware concepts # To gain a high-level understanding of Autoware's architecture and design, the following pages provide a brief overview: Autoware architecture Autoware concepts For experienced developers, the Autoware interfaces and individual component pages should also be reviewed to understand the inputs and outputs for each component or module at a more detailed level. Contributing to open source projects # If you are new to open source projects, we recommend reading GitHub's How to Contribute to Open Source guide for an overview of why people contribute to open source projects, what it means to contribute and much more besides. How can I get help? # Do not open issues for general support questions as we want to keep GitHub issues for confirmed bug reports. Instead, open a discussion in the Q&A category. For more details on the support mechanisms for Autoware, refer to the Support guidelines . Note Issues created for questions or unconfirmed bugs will be moved to GitHub discussions by the maintainers. How can I contribute? # Discussions # You can contribute to Autoware by facilitating and participating in discussions, such as: Proposing a new feature to enhance Autoware Joining an existing discussion and expressing your opinion Organizing discussions for other contributors Answering questions and supporting other contributors Working groups # The various working groups within the Autoware Foundation are responsible for accomplishing goals set by the Technical Steering Committee. These working groups are open to everyone, and joining a particular working group will allow you to gain an understanding of current projects, see how those projects are managed within each group and to contribute to issues that will help progress a particular project. To see the schedule for upcoming working group meetings, refer to the Autoware Foundation events calendar . Bug reports # Before you report a bug, please search the issue tracker for the appropriate repository. It is possible that someone has already reported the same issue and that workarounds exist. If you can't determine the appropriate repository, ask the maintainers for help by creating a new discussion in the Q&A category . When reporting a bug, you should provide a minimal set of instructions to reproduce the issue. Doing so allows us to quickly confirm and focus on the right problem. If you want to fix the bug by yourself that will be appreciated, but you should discuss possible approaches with the maintainers in the issue before submitting a pull request. Creating an issue is straightforward , but if you happen to experience any problems then create a Q&A discussion to ask for help. Pull requests # You can submit pull requests for small changes such as: Minor documentation updates Fixing spelling mistakes Fixing CI failures Fixing warnings detected by compilers or analysis tools Making small changes to a single package If your pull request is a large change, discuss with the maintainers before submission. Doing so ensures that the proposed change is in line with Autoware's design philosophy and current development plans. If you're not sure where to have that conversation, then create a new Q&A discussion . Examples of large changes include: Adding a new feature to Autoware Adding a new documentation page or section For more information on how to submit a good pull request, have a read of our pull request guidelines and don't forget to review the required license notations !","title":"Contributing"},{"location":"contributing/#contributing","text":"Thank you for your interest in contributing! Autoware is supported by people like you, and all types and sizes of contribution are welcome. As a contributor, here are the guidelines that we would like you to follow for Autoware and its associated repositories. Code of Conduct What should I know before I get started? Autoware concepts Contributing to open source projects How can I get help? How can I contribute? Participate in discussions Join a working group Report bugs Make a pull request Like Autoware itself, these guidelines are being actively developed and suggestions for improvement are always welcome! Guideline changes can be proposed by creating a discussion in the Ideas category .","title":"Contributing"},{"location":"contributing/#code-of-conduct","text":"To ensure the Autoware community stays open and inclusive, please follow our code of conduct . If you believe that someone in the community has violated the code of conduct, please make a report by emailing conduct@autoware.org.","title":"Code of Conduct"},{"location":"contributing/#what-should-i-know-before-i-get-started","text":"","title":"What should I know before I get started?"},{"location":"contributing/#autoware-concepts","text":"To gain a high-level understanding of Autoware's architecture and design, the following pages provide a brief overview: Autoware architecture Autoware concepts For experienced developers, the Autoware interfaces and individual component pages should also be reviewed to understand the inputs and outputs for each component or module at a more detailed level.","title":"Autoware concepts"},{"location":"contributing/#contributing-to-open-source-projects","text":"If you are new to open source projects, we recommend reading GitHub's How to Contribute to Open Source guide for an overview of why people contribute to open source projects, what it means to contribute and much more besides.","title":"Contributing to open source projects"},{"location":"contributing/#how-can-i-get-help","text":"Do not open issues for general support questions as we want to keep GitHub issues for confirmed bug reports. Instead, open a discussion in the Q&A category. For more details on the support mechanisms for Autoware, refer to the Support guidelines . Note Issues created for questions or unconfirmed bugs will be moved to GitHub discussions by the maintainers.","title":"How can I get help?"},{"location":"contributing/#how-can-i-contribute","text":"","title":"How can I contribute?"},{"location":"contributing/#discussions","text":"You can contribute to Autoware by facilitating and participating in discussions, such as: Proposing a new feature to enhance Autoware Joining an existing discussion and expressing your opinion Organizing discussions for other contributors Answering questions and supporting other contributors","title":"Discussions"},{"location":"contributing/#working-groups","text":"The various working groups within the Autoware Foundation are responsible for accomplishing goals set by the Technical Steering Committee. These working groups are open to everyone, and joining a particular working group will allow you to gain an understanding of current projects, see how those projects are managed within each group and to contribute to issues that will help progress a particular project. To see the schedule for upcoming working group meetings, refer to the Autoware Foundation events calendar .","title":"Working groups"},{"location":"contributing/#bug-reports","text":"Before you report a bug, please search the issue tracker for the appropriate repository. It is possible that someone has already reported the same issue and that workarounds exist. If you can't determine the appropriate repository, ask the maintainers for help by creating a new discussion in the Q&A category . When reporting a bug, you should provide a minimal set of instructions to reproduce the issue. Doing so allows us to quickly confirm and focus on the right problem. If you want to fix the bug by yourself that will be appreciated, but you should discuss possible approaches with the maintainers in the issue before submitting a pull request. Creating an issue is straightforward , but if you happen to experience any problems then create a Q&A discussion to ask for help.","title":"Bug reports"},{"location":"contributing/#pull-requests","text":"You can submit pull requests for small changes such as: Minor documentation updates Fixing spelling mistakes Fixing CI failures Fixing warnings detected by compilers or analysis tools Making small changes to a single package If your pull request is a large change, discuss with the maintainers before submission. Doing so ensures that the proposed change is in line with Autoware's design philosophy and current development plans. If you're not sure where to have that conversation, then create a new Q&A discussion . Examples of large changes include: Adding a new feature to Autoware Adding a new documentation page or section For more information on how to submit a good pull request, have a read of our pull request guidelines and don't forget to review the required license notations !","title":"Pull requests"},{"location":"contributing/license/","text":"License # Autoware is licensed under Apache License 2.0. Thus all contributions will be licensed as such as per clause 5 of the Apache License 2.0: 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. Here is an example copyright header to add to the top of a new file: Copyright [first year of contribution] The Autoware Contributors SPDX-License-Identifier: Apache-2.0 We don't write copyright notations of each contributor here. Instead, we place them in the NOTICE file like the following. This product includes code developed by [company name]. Copyright [first year of contribution] [company name] Let us know if your legal department has a special request for the copyright notation. Currently, the old formats explained here are also acceptable. Those old formats can be replaced by this new format if the original authors agree. Note that we won't write their copyrights to the NOTICE file unless they agree with the new format. References: https://opensource.google/docs/copyright/#the-year https://www.linuxfoundation.org/blog/copyright-notices-in-open-source-software-projects/ https://www.apache.org/licenses/LICENSE-2.0 https://www.apache.org/legal/src-headers.html https://www.apache.org/foundation/license-faq.html https://infra.apache.org/licensing-howto.html","title":"License"},{"location":"contributing/license/#license","text":"Autoware is licensed under Apache License 2.0. Thus all contributions will be licensed as such as per clause 5 of the Apache License 2.0: 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. Here is an example copyright header to add to the top of a new file: Copyright [first year of contribution] The Autoware Contributors SPDX-License-Identifier: Apache-2.0 We don't write copyright notations of each contributor here. Instead, we place them in the NOTICE file like the following. This product includes code developed by [company name]. Copyright [first year of contribution] [company name] Let us know if your legal department has a special request for the copyright notation. Currently, the old formats explained here are also acceptable. Those old formats can be replaced by this new format if the original authors agree. Note that we won't write their copyrights to the NOTICE file unless they agree with the new format. References: https://opensource.google/docs/copyright/#the-year https://www.linuxfoundation.org/blog/copyright-notices-in-open-source-software-projects/ https://www.apache.org/licenses/LICENSE-2.0 https://www.apache.org/legal/src-headers.html https://www.apache.org/foundation/license-faq.html https://infra.apache.org/licensing-howto.html","title":"License"},{"location":"contributing/coding-guidelines/","text":"Coding guidelines # Warning Under Construction Common guidelines #","title":"Coding guidelines"},{"location":"contributing/coding-guidelines/#coding-guidelines","text":"Warning Under Construction","title":"Coding guidelines"},{"location":"contributing/coding-guidelines/#common-guidelines","text":"","title":"Common guidelines"},{"location":"contributing/coding-guidelines/languages/","text":"Language-specific coding guidelines # Warning Under Construction","title":"Language-specific coding guidelines"},{"location":"contributing/coding-guidelines/languages/#language-specific-coding-guidelines","text":"Warning Under Construction","title":"Language-specific coding guidelines"},{"location":"contributing/coding-guidelines/languages/cmake/","text":"CMake # Warning Under Construction","title":"CMake"},{"location":"contributing/coding-guidelines/languages/cmake/#cmake","text":"Warning Under Construction","title":"CMake"},{"location":"contributing/coding-guidelines/languages/cpp/","text":"C++ # Warning Under Construction","title":"C++"},{"location":"contributing/coding-guidelines/languages/cpp/#c","text":"Warning Under Construction","title":"C++"},{"location":"contributing/coding-guidelines/languages/docker/","text":"Docker # Warning Under Construction","title":"Docker"},{"location":"contributing/coding-guidelines/languages/docker/#docker","text":"Warning Under Construction","title":"Docker"},{"location":"contributing/coding-guidelines/languages/github-actions/","text":"GitHub Actions # Warning Under Construction","title":"GitHub Actions"},{"location":"contributing/coding-guidelines/languages/github-actions/#github-actions","text":"Warning Under Construction","title":"GitHub Actions"},{"location":"contributing/coding-guidelines/languages/markdown/","text":"Markdown # Warning Under Construction","title":"Markdown"},{"location":"contributing/coding-guidelines/languages/markdown/#markdown","text":"Warning Under Construction","title":"Markdown"},{"location":"contributing/coding-guidelines/languages/package-xml/","text":"package.xml # Warning Under Construction","title":"package.xml"},{"location":"contributing/coding-guidelines/languages/package-xml/#packagexml","text":"Warning Under Construction","title":"package.xml"},{"location":"contributing/coding-guidelines/languages/python/","text":"Python # Warning Under Construction","title":"Python"},{"location":"contributing/coding-guidelines/languages/python/#python","text":"Warning Under Construction","title":"Python"},{"location":"contributing/coding-guidelines/languages/ros2-interfaces/","text":"ROS 2 interfaces # Warning Under Construction","title":"ROS 2 interfaces"},{"location":"contributing/coding-guidelines/languages/ros2-interfaces/#ros-2-interfaces","text":"Warning Under Construction","title":"ROS 2 interfaces"},{"location":"contributing/coding-guidelines/languages/shell-scripts/","text":"Shell scripts # Warning Under Construction","title":"Shell scripts"},{"location":"contributing/coding-guidelines/languages/shell-scripts/#shell-scripts","text":"Warning Under Construction","title":"Shell scripts"},{"location":"contributing/coding-guidelines/ros-nodes/","text":"ROS nodes coding guidelines # Warning Under Construction","title":"ROS nodes coding guidelines"},{"location":"contributing/coding-guidelines/ros-nodes/#ros-nodes-coding-guidelines","text":"Warning Under Construction","title":"ROS nodes coding guidelines"},{"location":"contributing/coding-guidelines/ros-nodes/class-design/","text":"Class design # Warning Under Construction","title":"Class design"},{"location":"contributing/coding-guidelines/ros-nodes/class-design/#class-design","text":"Warning Under Construction","title":"Class design"},{"location":"contributing/coding-guidelines/ros-nodes/console-logging/","text":"Console logging # Warning Under Construction","title":"Console logging"},{"location":"contributing/coding-guidelines/ros-nodes/console-logging/#console-logging","text":"Warning Under Construction","title":"Console logging"},{"location":"contributing/coding-guidelines/ros-nodes/coordinate-system/","text":"Coordinate system # Warning Under Construction","title":"Coordinate system"},{"location":"contributing/coding-guidelines/ros-nodes/coordinate-system/#coordinate-system","text":"Warning Under Construction","title":"Coordinate system"},{"location":"contributing/coding-guidelines/ros-nodes/directory-structure/","text":"Directory structure # Warning Under Construction","title":"Directory structure"},{"location":"contributing/coding-guidelines/ros-nodes/directory-structure/#directory-structure","text":"Warning Under Construction","title":"Directory structure"},{"location":"contributing/coding-guidelines/ros-nodes/launch-files/","text":"Launch files # Warning Under Construction","title":"Launch files"},{"location":"contributing/coding-guidelines/ros-nodes/launch-files/#launch-files","text":"Warning Under Construction","title":"Launch files"},{"location":"contributing/coding-guidelines/ros-nodes/message-guidelines/","text":"Message guidelines # Format # All messages should follow ROS message description specification . The accepted formats are: .msg .srv .action Default units # All the fields by default have the following units depending on their types: type default unit distance meter (m) angle radians (rad) time second (s) speed m/s velocity m/s acceleration m/s\u00b2 angular vel. rad/s angular accel. rad/s\u00b2 If a field in a message has any of these default units, don't add any suffix or prefix denoting the type. Non-default units # For non-default units, use following suffixes: type non-default unit suffix distance nanometer _nm distance micrometer _um distance millimeter _mm distance kilometer _km angle degree (deg) _deg time nanosecond _ns time microsecond _us time millisecond _ms time minute _min time hour (h) _hour velocity km/h _kmph If a unit that you'd like to use doesn't exist here, create an issue/PR to add it to this list. Message field types # For list of types supported by the ROS interfaces see here . Also copied here for convenience: Message Field Type C++ equivalent bool bool byte uint8_t char char float32 float float64 double int8 int8_t uint8 uint8_t int16 int16_t uint16 uint16_t int32 int32_t uint32 uint32_t int64 int64_t uint64 uint64_t string std::string wstring std::u16string Arrays # For arrays, use unbounded dynamic array type. Example: int32[] unbounded_integer_array Enumerations # ROS2 interfaces don't support enumerations directly. It is possible to define integers constants and assign them to a non-constant integer parameter. Constants are written in CONSTANT_CASE . Assign a different value to each element of a constant. Example from shape_msgs/msg/SolidPrimitive.msg uint8 BOX=1 uint8 SPHERE=2 uint8 CYLINDER=3 uint8 CONE=4 uint8 PRISM=5 # The type of the shape uint8 type Comments # On top of the message, briefly explain what the message contains and/or what it is used for. See sensor_msgs/msg/Imu.msg for an example. If necessary, add line comments before the fields that explain the context and/or meaning. For simple fields like x, y, z, w you might not need to add comments. Even though it is not strictly checked, try not to pass 100 characters in a line. Example: # Number of times the vehicle performed an emergency brake uint32 count_emergency_brake # Seconds passed since the last emergency brake uint64 duration Example usages # Don't use unit suffixes for default types: Bad: float32 path_length_m Good: float32 path_length Don't prefix the units: Bad: float32 kmph_velocity_vehicle Good: float32 velocity_vehicle_kmph Use recommended suffixes if they are available in the table : Bad: float32 velocity_vehicle_km_h Good: float32 velocity_vehicle_kmph","title":"Message guidelines"},{"location":"contributing/coding-guidelines/ros-nodes/message-guidelines/#message-guidelines","text":"","title":"Message guidelines"},{"location":"contributing/coding-guidelines/ros-nodes/message-guidelines/#format","text":"All messages should follow ROS message description specification . The accepted formats are: .msg .srv .action","title":"Format"},{"location":"contributing/coding-guidelines/ros-nodes/message-guidelines/#default-units","text":"All the fields by default have the following units depending on their types: type default unit distance meter (m) angle radians (rad) time second (s) speed m/s velocity m/s acceleration m/s\u00b2 angular vel. rad/s angular accel. rad/s\u00b2 If a field in a message has any of these default units, don't add any suffix or prefix denoting the type.","title":"Default units"},{"location":"contributing/coding-guidelines/ros-nodes/message-guidelines/#non-default-units","text":"For non-default units, use following suffixes: type non-default unit suffix distance nanometer _nm distance micrometer _um distance millimeter _mm distance kilometer _km angle degree (deg) _deg time nanosecond _ns time microsecond _us time millisecond _ms time minute _min time hour (h) _hour velocity km/h _kmph If a unit that you'd like to use doesn't exist here, create an issue/PR to add it to this list.","title":"Non-default units"},{"location":"contributing/coding-guidelines/ros-nodes/message-guidelines/#message-field-types","text":"For list of types supported by the ROS interfaces see here . Also copied here for convenience: Message Field Type C++ equivalent bool bool byte uint8_t char char float32 float float64 double int8 int8_t uint8 uint8_t int16 int16_t uint16 uint16_t int32 int32_t uint32 uint32_t int64 int64_t uint64 uint64_t string std::string wstring std::u16string","title":"Message field types"},{"location":"contributing/coding-guidelines/ros-nodes/message-guidelines/#arrays","text":"For arrays, use unbounded dynamic array type. Example: int32[] unbounded_integer_array","title":"Arrays"},{"location":"contributing/coding-guidelines/ros-nodes/message-guidelines/#enumerations","text":"ROS2 interfaces don't support enumerations directly. It is possible to define integers constants and assign them to a non-constant integer parameter. Constants are written in CONSTANT_CASE . Assign a different value to each element of a constant. Example from shape_msgs/msg/SolidPrimitive.msg uint8 BOX=1 uint8 SPHERE=2 uint8 CYLINDER=3 uint8 CONE=4 uint8 PRISM=5 # The type of the shape uint8 type","title":"Enumerations"},{"location":"contributing/coding-guidelines/ros-nodes/message-guidelines/#comments","text":"On top of the message, briefly explain what the message contains and/or what it is used for. See sensor_msgs/msg/Imu.msg for an example. If necessary, add line comments before the fields that explain the context and/or meaning. For simple fields like x, y, z, w you might not need to add comments. Even though it is not strictly checked, try not to pass 100 characters in a line. Example: # Number of times the vehicle performed an emergency brake uint32 count_emergency_brake # Seconds passed since the last emergency brake uint64 duration","title":"Comments"},{"location":"contributing/coding-guidelines/ros-nodes/message-guidelines/#example-usages","text":"Don't use unit suffixes for default types: Bad: float32 path_length_m Good: float32 path_length Don't prefix the units: Bad: float32 kmph_velocity_vehicle Good: float32 velocity_vehicle_kmph Use recommended suffixes if they are available in the table : Bad: float32 velocity_vehicle_km_h Good: float32 velocity_vehicle_kmph","title":"Example usages"},{"location":"contributing/coding-guidelines/ros-nodes/naming/","text":"Topic namespaces # Warning Under Construction","title":"Topic namespaces"},{"location":"contributing/coding-guidelines/ros-nodes/naming/#topic-namespaces","text":"Warning Under Construction","title":"Topic namespaces"},{"location":"contributing/coding-guidelines/ros-nodes/parameters/","text":"Parameters # Warning Under Construction","title":"Parameters"},{"location":"contributing/coding-guidelines/ros-nodes/parameters/#parameters","text":"Warning Under Construction","title":"Parameters"},{"location":"contributing/coding-guidelines/ros-nodes/task-scheduling/","text":"Task scheduling # Warning Under Construction","title":"Task scheduling"},{"location":"contributing/coding-guidelines/ros-nodes/task-scheduling/#task-scheduling","text":"Warning Under Construction","title":"Task scheduling"},{"location":"contributing/coding-guidelines/ros-nodes/topic-namespaces/","text":"Topic namespaces # Warning Under Construction","title":"Topic namespaces"},{"location":"contributing/coding-guidelines/ros-nodes/topic-namespaces/#topic-namespaces","text":"Warning Under Construction","title":"Topic namespaces"},{"location":"contributing/discussion-guidelines/","text":"Discussion guidelines # Warning Under Construction","title":"Discussion guidelines"},{"location":"contributing/discussion-guidelines/#discussion-guidelines","text":"Warning Under Construction","title":"Discussion guidelines"},{"location":"contributing/documentation-guidelines/","text":"Documentation guidelines # Warning Under Construction","title":"Documentation guidelines"},{"location":"contributing/documentation-guidelines/#documentation-guidelines","text":"Warning Under Construction","title":"Documentation guidelines"},{"location":"contributing/pull-request-guidelines/","text":"Pull request guidelines # General pull request workflow # Autoware uses the fork-and-pull model. Refer to GitHub Docs for the detailed explanation of the model. The following is a general example of our pull request workflow. Create a fork. (for the first time only) Create an issue. Discuss the approach to the issue with maintainers. Write code in the agreed approach. Write the tests and documentation if necessary. Follow our guidelines when you write code, tests, and documentation. Coding guidelines Testing guidelines Documentation guidelines Follow our Commit guidelines when commit your change. Test the code. In the later review process, you will need to write what tests you have done. Create a pull request. Read the pull request template carefully and fill the required content. Assign reviewers after creating a pull request. If you have no rights to assign reviewers, just mention them instead. If you are not sure who to set reviewers, contact to the people written as the maintainer tag in package.xml . Wait for the pull request to be reviewed. The reviewers will review your code following our review guidelines . Take a look at the guidelines as well because it is good to understand the thoughts of the reviewer's side. If CI checks have failed, fix the errors. Address the review comments pointed out by the reviewers. If you cannot understand or agree with a review comment, discuss it with the reviewers and find a rational reason. The author should be responsible for the final content of their pull request. The reviewers are obligated to make the author understand the meanings of each comment. After you have done with them, re-request a review to the reviewers and back to 6. If there are no more new review comments, the reviewers will approve the pull request and go to 6. Merge the pull request. Confirm all items of the checklist are checked off before merging. Anyone with write access can merge the pull request if there is no special request from maintainers. Generally, the author is expected to merge it to feel responsible for their pull request. If the author does not have write access, ask the reviewers or maintainers. It is the author's responsibility to care about their own pull request until it is merged. CI checks # Autoware has several checks for a pull request. The results are shown at the bottom of the pull request page as below. If the \u274c mark is shown, click the Details button and investigate the failure reason. If the Required mark is shown, you cannot merge the pull request unless you resolve the error. If not, it is optional, but preferably it should be fixed. The following sections explain about common CI checks in Autoware. Note that some repositories may have different settings. DCO # The Developer Certificate of Origin (DCO) is a lightweight way for contributors to certify that they wrote or otherwise have the right to submit the code they are contributing to the project. This workflow checks whether the pull request fulfills DCO . You need to confirm the required items and commit with git commit -s . Refer to the GitHub App page for more information. semantic-pull-request # Autoware uses Conventional Commits with the settings of commitizen/conventional-commit-types . This workflow checks whether the pull request follows Conventional Commits . Note that if there is only one commit in the pull request, you need to make the commit title semantic as well. This is due to GitHub's non-intuitive behavior when there is only one commit. GitHub uses the commit title for the squashed commit message, instead of the pull request title. Refer to amannn/action-semantic-pull-request for more detailed behaviors of this workflow. See our commit guidelines for the detailed rules. pre-commit # pre-commit is a tool to run formatters or linters when you commit. This workflow checks whether the pull request has no error with pre-commit . In the workflow pre-commit.ci - pr is enabled in the repository, it will automatically fix errors by pre-commit.ci as many as possible. If there are some errors remain, fix them manually. You can run pre-commit in your local environment by the following command: pre-commit run -a Or you can install pre-commit to the repository and automatically run it before committing: pre-commit install Since it is difficult to detect errors with no false positives, some jobs are split into another config file and marked as optional. To check them, use the --config option: pre-commit run -a --config .pre-commit-config-optional.yaml spell-check-differential # This workflow detects spelling mistakes using CSpell with our dictionary file . You can submit pull requests to tier4/autoware-spell-check-dict to update the dictionary. Since it is difficult to detect errors with no false positives, it is an optional workflow, but it is preferable to remove spelling mistakes as many as possible. build-and-test-differential # This workflow checks colcon build and colcon test for the pull request. To make the CI faster, it doesn't check all packages but only modified packages and the dependencies. build-and-test-differential-self-hosted # This workflow is the ARM64 version of build-and-test-differential . You need to add the ARM64 label to run this workflow. For reference information, since ARM machines are not supported by GitHub-hosted runners, we use self-hosted runners prepared by the AWF. Refer to GitHub Docs for the details about self-hosted runners. deploy-docs # This workflow deploys the preview documentation site for the pull request. You need to add the documentation label to run this workflow.","title":"Pull request guidelines"},{"location":"contributing/pull-request-guidelines/#pull-request-guidelines","text":"","title":"Pull request guidelines"},{"location":"contributing/pull-request-guidelines/#general-pull-request-workflow","text":"Autoware uses the fork-and-pull model. Refer to GitHub Docs for the detailed explanation of the model. The following is a general example of our pull request workflow. Create a fork. (for the first time only) Create an issue. Discuss the approach to the issue with maintainers. Write code in the agreed approach. Write the tests and documentation if necessary. Follow our guidelines when you write code, tests, and documentation. Coding guidelines Testing guidelines Documentation guidelines Follow our Commit guidelines when commit your change. Test the code. In the later review process, you will need to write what tests you have done. Create a pull request. Read the pull request template carefully and fill the required content. Assign reviewers after creating a pull request. If you have no rights to assign reviewers, just mention them instead. If you are not sure who to set reviewers, contact to the people written as the maintainer tag in package.xml . Wait for the pull request to be reviewed. The reviewers will review your code following our review guidelines . Take a look at the guidelines as well because it is good to understand the thoughts of the reviewer's side. If CI checks have failed, fix the errors. Address the review comments pointed out by the reviewers. If you cannot understand or agree with a review comment, discuss it with the reviewers and find a rational reason. The author should be responsible for the final content of their pull request. The reviewers are obligated to make the author understand the meanings of each comment. After you have done with them, re-request a review to the reviewers and back to 6. If there are no more new review comments, the reviewers will approve the pull request and go to 6. Merge the pull request. Confirm all items of the checklist are checked off before merging. Anyone with write access can merge the pull request if there is no special request from maintainers. Generally, the author is expected to merge it to feel responsible for their pull request. If the author does not have write access, ask the reviewers or maintainers. It is the author's responsibility to care about their own pull request until it is merged.","title":"General pull request workflow"},{"location":"contributing/pull-request-guidelines/#ci-checks","text":"Autoware has several checks for a pull request. The results are shown at the bottom of the pull request page as below. If the \u274c mark is shown, click the Details button and investigate the failure reason. If the Required mark is shown, you cannot merge the pull request unless you resolve the error. If not, it is optional, but preferably it should be fixed. The following sections explain about common CI checks in Autoware. Note that some repositories may have different settings.","title":"CI checks"},{"location":"contributing/pull-request-guidelines/#dco","text":"The Developer Certificate of Origin (DCO) is a lightweight way for contributors to certify that they wrote or otherwise have the right to submit the code they are contributing to the project. This workflow checks whether the pull request fulfills DCO . You need to confirm the required items and commit with git commit -s . Refer to the GitHub App page for more information.","title":"DCO"},{"location":"contributing/pull-request-guidelines/#semantic-pull-request","text":"Autoware uses Conventional Commits with the settings of commitizen/conventional-commit-types . This workflow checks whether the pull request follows Conventional Commits . Note that if there is only one commit in the pull request, you need to make the commit title semantic as well. This is due to GitHub's non-intuitive behavior when there is only one commit. GitHub uses the commit title for the squashed commit message, instead of the pull request title. Refer to amannn/action-semantic-pull-request for more detailed behaviors of this workflow. See our commit guidelines for the detailed rules.","title":"semantic-pull-request"},{"location":"contributing/pull-request-guidelines/#pre-commit","text":"pre-commit is a tool to run formatters or linters when you commit. This workflow checks whether the pull request has no error with pre-commit . In the workflow pre-commit.ci - pr is enabled in the repository, it will automatically fix errors by pre-commit.ci as many as possible. If there are some errors remain, fix them manually. You can run pre-commit in your local environment by the following command: pre-commit run -a Or you can install pre-commit to the repository and automatically run it before committing: pre-commit install Since it is difficult to detect errors with no false positives, some jobs are split into another config file and marked as optional. To check them, use the --config option: pre-commit run -a --config .pre-commit-config-optional.yaml","title":"pre-commit"},{"location":"contributing/pull-request-guidelines/#spell-check-differential","text":"This workflow detects spelling mistakes using CSpell with our dictionary file . You can submit pull requests to tier4/autoware-spell-check-dict to update the dictionary. Since it is difficult to detect errors with no false positives, it is an optional workflow, but it is preferable to remove spelling mistakes as many as possible.","title":"spell-check-differential"},{"location":"contributing/pull-request-guidelines/#build-and-test-differential","text":"This workflow checks colcon build and colcon test for the pull request. To make the CI faster, it doesn't check all packages but only modified packages and the dependencies.","title":"build-and-test-differential"},{"location":"contributing/pull-request-guidelines/#build-and-test-differential-self-hosted","text":"This workflow is the ARM64 version of build-and-test-differential . You need to add the ARM64 label to run this workflow. For reference information, since ARM machines are not supported by GitHub-hosted runners, we use self-hosted runners prepared by the AWF. Refer to GitHub Docs for the details about self-hosted runners.","title":"build-and-test-differential-self-hosted"},{"location":"contributing/pull-request-guidelines/#deploy-docs","text":"This workflow deploys the preview documentation site for the pull request. You need to add the documentation label to run this workflow.","title":"deploy-docs"},{"location":"contributing/pull-request-guidelines/commit-guidelines/","text":"Commit guidelines # This page explains our guidelines related to committing. Branch rules # Start branch names with the corresponding issue numbers (advisory, non-automated) # Rationale # Developers can quickly find the corresponding issues. It is helpful for tools. It is consistent with GitHub's default behavior. Exception # If there are no corresponding issues, you can ignore this rule. Example # 123-add-feature Reference # GitHub Docs Use kebab-case for the separator of branch names (advisory, non-automated) # Rationale # It is consistent with GitHub's default behavior. Example # 123-add-feature Reference # GitHub Docs Make branch names descriptive (advisory, non-automated) # Rationale # It can avoid conflicts of names. Developers can understand the purpose of the branch. Exception # If you have already submitted a pull request, you do not have to change the branch name because you need to re-create a pull request, which is noisy and a waste of time. Be careful from the next time. Example # Usually it is good to start with a verb. 123-fix-memory-leak-of-trajectory-follower Commit rules # Sign-off your commits (required, automated) # Developers must certify that they wrote or otherwise have the right to submit the code they are contributing to the project. Rationale # If not, it will lead to complex license problems. Example # git commit -s feat: add a feature Signed-off-by: Autoware <autoware@example.com> Reference # GitHub Apps - DCO Follow Conventional Commits (required, automated) # Rationale # It can generate categorized changelog, for example using git-cliff . Example # feat(trajectory_follower): add an awesome feature Note that you have to start the description part ( add an awesome feature ) with a lowercase. Since Autoware uses the Squash and merge method of GitHub, you need to make the PR title follow Conventional Commits as well. Reference # Conventional Commits commitizen/conventional-commit-types GitHub Docs Add the related node names to the scope of Conventional Commits (advisory, non-automated) # Rationale # The package maintainer can become aware of the pull request by seeing the notification. It can make the changelog clearer. Example # feat(trajectory_follower): add an awesome feature Keep a pull request small (advisory, non-automated) # Rationale # Small pull requests are easy to understand for reviewers. Small pull requests are easy to revert for maintainers. Exception # It is acceptable if it is agreed with maintainers that there is no other way but to submit a big pull request. Example # Avoid developing two features in one pull request. Avoid mixing feat , fix , and refactor in the same commit.","title":"Commit guidelines"},{"location":"contributing/pull-request-guidelines/commit-guidelines/#commit-guidelines","text":"This page explains our guidelines related to committing.","title":"Commit guidelines"},{"location":"contributing/pull-request-guidelines/commit-guidelines/#branch-rules","text":"","title":"Branch rules"},{"location":"contributing/pull-request-guidelines/commit-guidelines/#start-branch-names-with-the-corresponding-issue-numbers-advisory-non-automated","text":"","title":"Start branch names with the corresponding issue numbers (advisory, non-automated)"},{"location":"contributing/pull-request-guidelines/commit-guidelines/#rationale","text":"Developers can quickly find the corresponding issues. It is helpful for tools. It is consistent with GitHub's default behavior.","title":"Rationale"},{"location":"contributing/pull-request-guidelines/commit-guidelines/#exception","text":"If there are no corresponding issues, you can ignore this rule.","title":"Exception"},{"location":"contributing/pull-request-guidelines/commit-guidelines/#example","text":"123-add-feature","title":"Example"},{"location":"contributing/pull-request-guidelines/commit-guidelines/#reference","text":"GitHub Docs","title":"Reference"},{"location":"contributing/pull-request-guidelines/commit-guidelines/#use-kebab-case-for-the-separator-of-branch-names-advisory-non-automated","text":"","title":"Use kebab-case for the separator of branch names (advisory, non-automated)"},{"location":"contributing/pull-request-guidelines/commit-guidelines/#rationale_1","text":"It is consistent with GitHub's default behavior.","title":"Rationale"},{"location":"contributing/pull-request-guidelines/commit-guidelines/#example_1","text":"123-add-feature","title":"Example"},{"location":"contributing/pull-request-guidelines/commit-guidelines/#reference_1","text":"GitHub Docs","title":"Reference"},{"location":"contributing/pull-request-guidelines/commit-guidelines/#make-branch-names-descriptive-advisory-non-automated","text":"","title":"Make branch names descriptive (advisory, non-automated)"},{"location":"contributing/pull-request-guidelines/commit-guidelines/#rationale_2","text":"It can avoid conflicts of names. Developers can understand the purpose of the branch.","title":"Rationale"},{"location":"contributing/pull-request-guidelines/commit-guidelines/#exception_1","text":"If you have already submitted a pull request, you do not have to change the branch name because you need to re-create a pull request, which is noisy and a waste of time. Be careful from the next time.","title":"Exception"},{"location":"contributing/pull-request-guidelines/commit-guidelines/#example_2","text":"Usually it is good to start with a verb. 123-fix-memory-leak-of-trajectory-follower","title":"Example"},{"location":"contributing/pull-request-guidelines/commit-guidelines/#commit-rules","text":"","title":"Commit rules"},{"location":"contributing/pull-request-guidelines/commit-guidelines/#sign-off-your-commits-required-automated","text":"Developers must certify that they wrote or otherwise have the right to submit the code they are contributing to the project.","title":"Sign-off your commits (required, automated)"},{"location":"contributing/pull-request-guidelines/commit-guidelines/#rationale_3","text":"If not, it will lead to complex license problems.","title":"Rationale"},{"location":"contributing/pull-request-guidelines/commit-guidelines/#example_3","text":"git commit -s feat: add a feature Signed-off-by: Autoware <autoware@example.com>","title":"Example"},{"location":"contributing/pull-request-guidelines/commit-guidelines/#reference_2","text":"GitHub Apps - DCO","title":"Reference"},{"location":"contributing/pull-request-guidelines/commit-guidelines/#follow-conventional-commits-required-automated","text":"","title":"Follow Conventional Commits (required, automated)"},{"location":"contributing/pull-request-guidelines/commit-guidelines/#rationale_4","text":"It can generate categorized changelog, for example using git-cliff .","title":"Rationale"},{"location":"contributing/pull-request-guidelines/commit-guidelines/#example_4","text":"feat(trajectory_follower): add an awesome feature Note that you have to start the description part ( add an awesome feature ) with a lowercase. Since Autoware uses the Squash and merge method of GitHub, you need to make the PR title follow Conventional Commits as well.","title":"Example"},{"location":"contributing/pull-request-guidelines/commit-guidelines/#reference_3","text":"Conventional Commits commitizen/conventional-commit-types GitHub Docs","title":"Reference"},{"location":"contributing/pull-request-guidelines/commit-guidelines/#add-the-related-node-names-to-the-scope-of-conventional-commits-advisory-non-automated","text":"","title":"Add the related node names to the scope of Conventional Commits (advisory, non-automated)"},{"location":"contributing/pull-request-guidelines/commit-guidelines/#rationale_5","text":"The package maintainer can become aware of the pull request by seeing the notification. It can make the changelog clearer.","title":"Rationale"},{"location":"contributing/pull-request-guidelines/commit-guidelines/#example_5","text":"feat(trajectory_follower): add an awesome feature","title":"Example"},{"location":"contributing/pull-request-guidelines/commit-guidelines/#keep-a-pull-request-small-advisory-non-automated","text":"","title":"Keep a pull request small (advisory, non-automated)"},{"location":"contributing/pull-request-guidelines/commit-guidelines/#rationale_6","text":"Small pull requests are easy to understand for reviewers. Small pull requests are easy to revert for maintainers.","title":"Rationale"},{"location":"contributing/pull-request-guidelines/commit-guidelines/#exception_2","text":"It is acceptable if it is agreed with maintainers that there is no other way but to submit a big pull request.","title":"Exception"},{"location":"contributing/pull-request-guidelines/commit-guidelines/#example_6","text":"Avoid developing two features in one pull request. Avoid mixing feat , fix , and refactor in the same commit.","title":"Example"},{"location":"contributing/pull-request-guidelines/review-guidelines/","text":"Review guidelines # Warning Under Construction","title":"Review guidelines"},{"location":"contributing/pull-request-guidelines/review-guidelines/#review-guidelines","text":"Warning Under Construction","title":"Review guidelines"},{"location":"contributing/pull-request-guidelines/review-tips/","text":"Tips # This page introduces tips around pull requests or reviews. Toggle annotations or review comments in the diff view # There will be some annotations or review comments in the diff view during your review. Press the A key to toggle annotations. Before: After: Also, press the I key to toggle review comments. Refer to GitHub Docs for other keyboard shortcuts. View code in the web-based Visual Studio Code # You can open Visual Studio Code from your browser to view code in a rich UI. Press the . key on any repository or pull request. Refer to github/dev for more detailed usage. Check out the branch of a pull request quickly # If you want to check out the branch of a pull request, it's generally troublesome with the fork-and-pull model. # Copy the user name and the fork URL. git remote add { user-name } { fork-url } git checkout { user-name } / { branch-name } git remote rm { user-name } # To clean up Instead, you can use GitHub CLI to simplify the steps, just run gh pr checkout {pr-number} . You can copy the command from the top right of the pull request page.","title":"Tips"},{"location":"contributing/pull-request-guidelines/review-tips/#tips","text":"This page introduces tips around pull requests or reviews.","title":"Tips"},{"location":"contributing/pull-request-guidelines/review-tips/#toggle-annotations-or-review-comments-in-the-diff-view","text":"There will be some annotations or review comments in the diff view during your review. Press the A key to toggle annotations. Before: After: Also, press the I key to toggle review comments. Refer to GitHub Docs for other keyboard shortcuts.","title":"Toggle annotations or review comments in the diff view"},{"location":"contributing/pull-request-guidelines/review-tips/#view-code-in-the-web-based-visual-studio-code","text":"You can open Visual Studio Code from your browser to view code in a rich UI. Press the . key on any repository or pull request. Refer to github/dev for more detailed usage.","title":"View code in the web-based Visual Studio Code"},{"location":"contributing/pull-request-guidelines/review-tips/#check-out-the-branch-of-a-pull-request-quickly","text":"If you want to check out the branch of a pull request, it's generally troublesome with the fork-and-pull model. # Copy the user name and the fork URL. git remote add { user-name } { fork-url } git checkout { user-name } / { branch-name } git remote rm { user-name } # To clean up Instead, you can use GitHub CLI to simplify the steps, just run gh pr checkout {pr-number} . You can copy the command from the top right of the pull request page.","title":"Check out the branch of a pull request quickly"},{"location":"contributing/testing-guidelines/","text":"Testing guidelines # Warning Under Construction","title":"Testing guidelines"},{"location":"contributing/testing-guidelines/#testing-guidelines","text":"Warning Under Construction","title":"Testing guidelines"},{"location":"design/","text":"Autoware's Design # Architecture # Core and Universe. Autoware provides the runtimes and technology components by open-source software. The runtimes are based on the Robot Operating System (ROS). The technology components are provided by contributors, which include, but are not limited to: Sensing Camera Component LiDAR Component RADAR Component GNSS Component Computing Localization Component Perception Component Planning Component Control Component Logging Component System Monitoring Component Actuation DBW Component Tools Simulator Component Mapping Component Remote Component ML Component Annotation Component Calibration Component Concern, Assumption, and Limitation # The downside of the microautonomy architecture is that the computational performance of end applications is sacrificed due to its data path overhead attributed to functional modularity. In other words, the trade-off characteristic of the microautonomy architecture exists between computational performance and functional modularity. This trade-off problem can be solved technically by introducing real-time capability. This is because autonomous driving systems are not really designed to be real-fast, that is, low-latency computing is nice-to-have but not must-have. The must-have feature for autonomous driving systems is that the latency of computing is predictable, that is, the systems are real-time. As a whole, we can compromise computational performance to an extent that is predictable enough to meet the given timing constraints of autonomous driving systems, often referred to as deadlines of computation. Design # Warning Under Construction Autoware concepts # Autoware interfaces # Configuration management # Conclusion #","title":"Autoware's Design"},{"location":"design/#autowares-design","text":"","title":"Autoware's Design"},{"location":"design/#architecture","text":"Core and Universe. Autoware provides the runtimes and technology components by open-source software. The runtimes are based on the Robot Operating System (ROS). The technology components are provided by contributors, which include, but are not limited to: Sensing Camera Component LiDAR Component RADAR Component GNSS Component Computing Localization Component Perception Component Planning Component Control Component Logging Component System Monitoring Component Actuation DBW Component Tools Simulator Component Mapping Component Remote Component ML Component Annotation Component Calibration Component","title":"Architecture"},{"location":"design/#concern-assumption-and-limitation","text":"The downside of the microautonomy architecture is that the computational performance of end applications is sacrificed due to its data path overhead attributed to functional modularity. In other words, the trade-off characteristic of the microautonomy architecture exists between computational performance and functional modularity. This trade-off problem can be solved technically by introducing real-time capability. This is because autonomous driving systems are not really designed to be real-fast, that is, low-latency computing is nice-to-have but not must-have. The must-have feature for autonomous driving systems is that the latency of computing is predictable, that is, the systems are real-time. As a whole, we can compromise computational performance to an extent that is predictable enough to meet the given timing constraints of autonomous driving systems, often referred to as deadlines of computation.","title":"Concern, Assumption, and Limitation"},{"location":"design/#design","text":"Warning Under Construction","title":"Design"},{"location":"design/#autoware-concepts","text":"","title":"Autoware concepts"},{"location":"design/#autoware-interfaces","text":"","title":"Autoware interfaces"},{"location":"design/#configuration-management","text":"","title":"Configuration management"},{"location":"design/#conclusion","text":"","title":"Conclusion"},{"location":"design/autoware-concepts/","text":"Autoware concepts # Autoware is the world\u2019s first open-source software for autonomous driving systems. Autoware provides value for both The technology developers of autonomous driving systems can create new components based on Autoware. The service operators of autonomous driving systems, on the other hand, can select appropriate technology components with Autoware. This is enabled by the microautonomy architecture that modularizes its software stack into the core and universe subsystems (modules). Microautonomy architecture # Autoware uses a pipeline architecture to enable the development of autonomous driving systems. The pipeline architecture used in Autoware consists of components similar to three-layer-architecture . And they run in parallel. There are 2 main modules: the Core and the Universe. The components in these modules are designed to be extensible and reusable. And we call it microautonomy architecture. The Core module # The Core module contains basic runtimes and technology components that satisfy the basic functionality and capability of sensing, computing, and actuation required for autonomous driving systems. AWF develops and maintains the Core module with their architects and leading members through their working groups. Anyone can contribute to the Core but the PR(Pull Request) acceptance criteria is more strict compared to the Universe. The Universe module # The Universe modules are extensions to the Core module that can be provided by the technology developers to enhance the functionality and capability of sensing, computing, and actuation. AWF provides the base Universe module to extend from. A key feature of the microautonomy architecture is that the Universe modules can be contributed to by any organization and individual. That is, you can even create your Universe and make it available for the Autoware community and ecosystem. AWF is responsible for quality control of the Universe modules through their development process. As a result, there are multiple types of the Universe modules - some are verified and validated by AWF and others are not. It is up to the users of Autoware which Universe modules are selected and integrated to build their end applications. Interface design # The interface design is the most essential piece of the microautonomy architecture, which is classified into internal and external interfaces. The component interface is designed for the components in a Universe module to communicate with those in other modules, including the Core module, within Autoware internally. The AD(Autonomous Driving) API, on the other hand, is designed for the applications of Autoware to access the technology components in the Core and Universe modules of Autoware externally. Designing solid interfaces, the microautonomy architecture is made possible with our partners, and at the same time is made feasible for our partners. Challenges # A grand challenge of the microautonomy architecture is to achieve real-time capability, which guarantees all the technology components activated in the system to predictably meet timing constraints (given deadlines). In general, it is difficult, if not impossible, to tightly estimate the worst-case execution times (WCETs) of components. In addition, it is also difficult, if not impossible, to tightly estimate the end-to-end latency of components connected by a DAG. Autonomous driving systems based on the microautonomy architecture, therefore, must be designed to be fail-safe but not never-fail. We accept that the timing constraints may be violated (the given deadlines may be missed) as far as the overrun is taken into account. The overrun handlers are two-fold: (i) platform-defined and (ii) user-defined. The platform-defined handler is implemented as part of the platform by default, while the user-defined handler can overwrite it or add a new handler to the system. This is what we call \u201cfail-safe\u201d on a timely basis. Requirements and roadmap # Goals: All open-source Use case driven Real-time (predictable) framework with overrun handling Code quality","title":"Autoware concepts"},{"location":"design/autoware-concepts/#autoware-concepts","text":"Autoware is the world\u2019s first open-source software for autonomous driving systems. Autoware provides value for both The technology developers of autonomous driving systems can create new components based on Autoware. The service operators of autonomous driving systems, on the other hand, can select appropriate technology components with Autoware. This is enabled by the microautonomy architecture that modularizes its software stack into the core and universe subsystems (modules).","title":"Autoware concepts"},{"location":"design/autoware-concepts/#microautonomy-architecture","text":"Autoware uses a pipeline architecture to enable the development of autonomous driving systems. The pipeline architecture used in Autoware consists of components similar to three-layer-architecture . And they run in parallel. There are 2 main modules: the Core and the Universe. The components in these modules are designed to be extensible and reusable. And we call it microautonomy architecture.","title":"Microautonomy architecture"},{"location":"design/autoware-concepts/#the-core-module","text":"The Core module contains basic runtimes and technology components that satisfy the basic functionality and capability of sensing, computing, and actuation required for autonomous driving systems. AWF develops and maintains the Core module with their architects and leading members through their working groups. Anyone can contribute to the Core but the PR(Pull Request) acceptance criteria is more strict compared to the Universe.","title":"The Core module"},{"location":"design/autoware-concepts/#the-universe-module","text":"The Universe modules are extensions to the Core module that can be provided by the technology developers to enhance the functionality and capability of sensing, computing, and actuation. AWF provides the base Universe module to extend from. A key feature of the microautonomy architecture is that the Universe modules can be contributed to by any organization and individual. That is, you can even create your Universe and make it available for the Autoware community and ecosystem. AWF is responsible for quality control of the Universe modules through their development process. As a result, there are multiple types of the Universe modules - some are verified and validated by AWF and others are not. It is up to the users of Autoware which Universe modules are selected and integrated to build their end applications.","title":"The Universe module"},{"location":"design/autoware-concepts/#interface-design","text":"The interface design is the most essential piece of the microautonomy architecture, which is classified into internal and external interfaces. The component interface is designed for the components in a Universe module to communicate with those in other modules, including the Core module, within Autoware internally. The AD(Autonomous Driving) API, on the other hand, is designed for the applications of Autoware to access the technology components in the Core and Universe modules of Autoware externally. Designing solid interfaces, the microautonomy architecture is made possible with our partners, and at the same time is made feasible for our partners.","title":"Interface design"},{"location":"design/autoware-concepts/#challenges","text":"A grand challenge of the microautonomy architecture is to achieve real-time capability, which guarantees all the technology components activated in the system to predictably meet timing constraints (given deadlines). In general, it is difficult, if not impossible, to tightly estimate the worst-case execution times (WCETs) of components. In addition, it is also difficult, if not impossible, to tightly estimate the end-to-end latency of components connected by a DAG. Autonomous driving systems based on the microautonomy architecture, therefore, must be designed to be fail-safe but not never-fail. We accept that the timing constraints may be violated (the given deadlines may be missed) as far as the overrun is taken into account. The overrun handlers are two-fold: (i) platform-defined and (ii) user-defined. The platform-defined handler is implemented as part of the platform by default, while the user-defined handler can overwrite it or add a new handler to the system. This is what we call \u201cfail-safe\u201d on a timely basis.","title":"Challenges"},{"location":"design/autoware-concepts/#requirements-and-roadmap","text":"Goals: All open-source Use case driven Real-time (predictable) framework with overrun handling Code quality","title":"Requirements and roadmap"},{"location":"design/autoware-interfaces/","text":"Autoware Interface Design # Abstract # Autoware defines three categories of interfaces. The first one is Autoware AD API for operating the vehicle from outside the autonomous driving system such as the Fleet Management System (FMS) and Human Machine Interface (HMI) for operators or passengers. The second one is Autoware component interface for components to communicate with each other. The last one is the local interface used inside the component. Concept # Applications can operate multiple and various vehicles in a common way. Applications are not affected by version updates and implementation changes. Developers only need to know the interface to add new features and hardware. Requirements # Goals: AD API provides functionality to create the following applications: Drive the vehicle on the route or drive to the requested positions in order. Operate vehicle behavior such as starting and stopping. Display or announce the vehicle status to operators, passengers, and people around. Control vehicle devices such as doors. Monitor the vehicle or drive it manually. AD API provides stable and long-term specifications. This enables unified access to all vehicles. AD API hides differences in version and implementation and absorbs the impact of changes. AD API has a default implementation and can be applied to some simple ODDs with options. The AD API implementation is extensible with the third-party components as long as it meets the specifications. The component interface provides stable and medium-term specifications. This makes it easier to add components. The component interface clarifies the public and private parts of a component and improves maintainability. The component interface is extensible with the third-party design to improve the sub-components' reusability. Non-goals: AD API does not cover security. Use it with other reliable methods. The component interface is just a specification, it does not include an implementation. Architecture # The components of Autoware are connected via the component interface. Each component uses the interface to provide functionality and to access other components. AD API implementation is also a component. Since the functional elements required for AD API are defined as the component interface, other components do not need to consider AD API directly. Tools for evaluation and debugging, such as simulators, access both AD API and the component interface. The component interface has a hierarchical specification. The top-level architecture consists of some components. Each component has some options of the next-level architecture. Developers select one of them when implementing the component. The simplest next-level architecture is monolithic. This is an all-in-one and black box implementation, and is suitable for small group development, prototyping, and very complex functions. Others are arbitrary architecture consists of sub-components and have advantages for large group development. A sub-component can be combined with others that adopt the same architecture. Third parties can define and publish their own architecture and interface for open source development. It is desirable to propose them for standardization if they are sufficiently evaluated. Features # Communication Method # As shown in the table below, interfaces are classified into four communication methods to define their behavior. Function Call is a request-response communication and is used for processing that requires immediate results. The others are publish-subscribe communication. Notification is used to process data that changes with some event, typically a callback. Streams handle continuously changing data. Reliable Stream expects all data to arrive without loss, Realtime Stream expects the latest data to arrive with low delay. Communication Method ROS Implementation Optional Implementation Function Call Service HTTP Notification Topic (reliable, transient_local) MQTT (QoS=2, retain) Reliable Stream Topic (reliable, volatile) MQTT (QoS=2) Realtime Stream Topic (best_effort, volatile) MQTT (QoS=0) These methods are provided as services or topics of ROS since Autoware is developed using ROS and mainly communicates with its packages. On the other hand, FMS and HMI are often implemented without ROS, Autoware is also expected to communicate with applications that do not use ROS. It is wasteful for each of these applications to have an adapter for Autoware, and a more suitable means of communication is required. HTTP and MQTT are suggested as additional options because these protocols are widely used and can substitute the behavior of services and topics. In that case, text formats such as JSON where field names are repeated in an array of objects, are inefficient and it is necessary to consider the serialization. Naming Convention # The name of the interface must be /<component name>/api/<interface name> , where <component name> is the name of the component. For an AD API component, omit this part and start with /api . The <interface name> is an arbitrary string separated by slashes. Note that this rule causes a restriction that the namespace api must not be used as a name other than AD API and the component interface. The following are examples of correct interface names for AD API and the component interface: /api/autoware/state /api/autoware/engage /planning/api/route/set /vehicle/api/status The following are examples of incorrect interface names for AD API and the component interface: /ad_api/autoware/state /autoware/engage /planning/route/set/api /vehicle/my_api/status Logging # It is recommended to log the interface for analysis of vehicle behavior. If logging is needed, rosbag is available for topics, and use logger in rclcpp or rclpy for services. Typically, create a wrapper for service and client classes that logs when a service is called. Restrictions # For each API, consider the restrictions such as following and describe them if necessary. Services: response time pre-condition post-condition execution order concurrent execution Topics: recommended delay range maximum delay recommended frequency range minimum frequency default frequency Data Structure # Data Type Definition # Do not share the types in AD API unless they are obviously the same to avoid changes in one API affecting another. Also, implementation-dependent types, including the component interface, should not be used in AD API for the same reason. Use the type in AD API in implementation, or create the same type and copy the data to convert the type. Constants and Enumeration # Since ROS don't support enumeration, use constants instead. The default value of type such as zero and empty string should not be used to detect that a variable is unassigned. Alternatively, assign it a dedicated name to indicate that it is undefined. If one type has multiple enumerations, comment on the correspondence between constants and variables. Assign unique values to all constants so that it can be distinguished from other enumerations. Do not use enumeration values directly, as assignments are subject to change when the version is updated. Time Stamp # Clarify what the timestamp indicates. for example, send time, measurement time, update time, etc. Consider having multiple timestamps if necessary. Use std_msgs/msg/Header when using ROS transform. Also consider whether the header is common to all data, independent for each data, or additional timestamp is required. Request Header # Currently, there is no required header. Response Status # The interfaces whose communication method is Function Call use a common response status to unify the error format. For those interfaces, include the ResponseStatus shown below in the response with the name status. The data status.summary.code is the execution result of the interface, and the caller branches the process according to this value. Others are for the users and should not be used directly by the program. These data are primarily used to provide users with solution tips and to ask the developer for the cause of the error. The typical use of the field details is when an interface calls other interfaces. That interface stores response statuses in details , then merges them and sets the result to summary . This allows the developer to know which component was causing the error by checking details . ResponseStatus Name Type Description summary ResponseStatusDetail status summary details ResponseStatusDetail Array status details ResponseStatusDetail Name Type Description code uint32 response status code component string the component that caused the error message string error message description string error information such as detailed message and document URL ResponseStatusCode Group Code Description 0x0000 0x0000 UNKNOWN T.B.D. T.B.D. OK T.B.D. T.B.D. SUCCESS T.B.D. T.B.D. ACCEPTED T.B.D. T.B.D. NO_EFFECT T.B.D. T.B.D. UNAVAILABLE T.B.D. T.B.D. WARNING T.B.D. T.B.D. ERROR T.B.D. T.B.D. FORBIDDEN T.B.D. T.B.D. BAD_REQUEST T.B.D. T.B.D. NOT_SUPPORTED T.B.D. T.B.D. TIMEOUT Concern, Assumption, and Limitation # The applications use the version information provided by AD API to check compatibility. Unknown versions are also treated as available as long as the major versions match (excluding major version 0). Compatibility between AD API and the component interface is assumed to be maintained by the version management system. If an unintended behavior of AD API is detected, the application should take appropriate action. Autoware tries to keep working as long as possible, but it is not guaranteed to be safe. Safety should be considered for the entire system, including the applications.","title":"Autoware Interface Design"},{"location":"design/autoware-interfaces/#autoware-interface-design","text":"","title":"Autoware Interface Design"},{"location":"design/autoware-interfaces/#abstract","text":"Autoware defines three categories of interfaces. The first one is Autoware AD API for operating the vehicle from outside the autonomous driving system such as the Fleet Management System (FMS) and Human Machine Interface (HMI) for operators or passengers. The second one is Autoware component interface for components to communicate with each other. The last one is the local interface used inside the component.","title":"Abstract"},{"location":"design/autoware-interfaces/#concept","text":"Applications can operate multiple and various vehicles in a common way. Applications are not affected by version updates and implementation changes. Developers only need to know the interface to add new features and hardware.","title":"Concept"},{"location":"design/autoware-interfaces/#requirements","text":"Goals: AD API provides functionality to create the following applications: Drive the vehicle on the route or drive to the requested positions in order. Operate vehicle behavior such as starting and stopping. Display or announce the vehicle status to operators, passengers, and people around. Control vehicle devices such as doors. Monitor the vehicle or drive it manually. AD API provides stable and long-term specifications. This enables unified access to all vehicles. AD API hides differences in version and implementation and absorbs the impact of changes. AD API has a default implementation and can be applied to some simple ODDs with options. The AD API implementation is extensible with the third-party components as long as it meets the specifications. The component interface provides stable and medium-term specifications. This makes it easier to add components. The component interface clarifies the public and private parts of a component and improves maintainability. The component interface is extensible with the third-party design to improve the sub-components' reusability. Non-goals: AD API does not cover security. Use it with other reliable methods. The component interface is just a specification, it does not include an implementation.","title":"Requirements"},{"location":"design/autoware-interfaces/#architecture","text":"The components of Autoware are connected via the component interface. Each component uses the interface to provide functionality and to access other components. AD API implementation is also a component. Since the functional elements required for AD API are defined as the component interface, other components do not need to consider AD API directly. Tools for evaluation and debugging, such as simulators, access both AD API and the component interface. The component interface has a hierarchical specification. The top-level architecture consists of some components. Each component has some options of the next-level architecture. Developers select one of them when implementing the component. The simplest next-level architecture is monolithic. This is an all-in-one and black box implementation, and is suitable for small group development, prototyping, and very complex functions. Others are arbitrary architecture consists of sub-components and have advantages for large group development. A sub-component can be combined with others that adopt the same architecture. Third parties can define and publish their own architecture and interface for open source development. It is desirable to propose them for standardization if they are sufficiently evaluated.","title":"Architecture"},{"location":"design/autoware-interfaces/#features","text":"","title":"Features"},{"location":"design/autoware-interfaces/#communication-method","text":"As shown in the table below, interfaces are classified into four communication methods to define their behavior. Function Call is a request-response communication and is used for processing that requires immediate results. The others are publish-subscribe communication. Notification is used to process data that changes with some event, typically a callback. Streams handle continuously changing data. Reliable Stream expects all data to arrive without loss, Realtime Stream expects the latest data to arrive with low delay. Communication Method ROS Implementation Optional Implementation Function Call Service HTTP Notification Topic (reliable, transient_local) MQTT (QoS=2, retain) Reliable Stream Topic (reliable, volatile) MQTT (QoS=2) Realtime Stream Topic (best_effort, volatile) MQTT (QoS=0) These methods are provided as services or topics of ROS since Autoware is developed using ROS and mainly communicates with its packages. On the other hand, FMS and HMI are often implemented without ROS, Autoware is also expected to communicate with applications that do not use ROS. It is wasteful for each of these applications to have an adapter for Autoware, and a more suitable means of communication is required. HTTP and MQTT are suggested as additional options because these protocols are widely used and can substitute the behavior of services and topics. In that case, text formats such as JSON where field names are repeated in an array of objects, are inefficient and it is necessary to consider the serialization.","title":"Communication Method"},{"location":"design/autoware-interfaces/#naming-convention","text":"The name of the interface must be /<component name>/api/<interface name> , where <component name> is the name of the component. For an AD API component, omit this part and start with /api . The <interface name> is an arbitrary string separated by slashes. Note that this rule causes a restriction that the namespace api must not be used as a name other than AD API and the component interface. The following are examples of correct interface names for AD API and the component interface: /api/autoware/state /api/autoware/engage /planning/api/route/set /vehicle/api/status The following are examples of incorrect interface names for AD API and the component interface: /ad_api/autoware/state /autoware/engage /planning/route/set/api /vehicle/my_api/status","title":"Naming Convention"},{"location":"design/autoware-interfaces/#logging","text":"It is recommended to log the interface for analysis of vehicle behavior. If logging is needed, rosbag is available for topics, and use logger in rclcpp or rclpy for services. Typically, create a wrapper for service and client classes that logs when a service is called.","title":"Logging"},{"location":"design/autoware-interfaces/#restrictions","text":"For each API, consider the restrictions such as following and describe them if necessary. Services: response time pre-condition post-condition execution order concurrent execution Topics: recommended delay range maximum delay recommended frequency range minimum frequency default frequency","title":"Restrictions"},{"location":"design/autoware-interfaces/#data-structure","text":"","title":"Data Structure"},{"location":"design/autoware-interfaces/#data-type-definition","text":"Do not share the types in AD API unless they are obviously the same to avoid changes in one API affecting another. Also, implementation-dependent types, including the component interface, should not be used in AD API for the same reason. Use the type in AD API in implementation, or create the same type and copy the data to convert the type.","title":"Data Type Definition"},{"location":"design/autoware-interfaces/#constants-and-enumeration","text":"Since ROS don't support enumeration, use constants instead. The default value of type such as zero and empty string should not be used to detect that a variable is unassigned. Alternatively, assign it a dedicated name to indicate that it is undefined. If one type has multiple enumerations, comment on the correspondence between constants and variables. Assign unique values to all constants so that it can be distinguished from other enumerations. Do not use enumeration values directly, as assignments are subject to change when the version is updated.","title":"Constants and Enumeration"},{"location":"design/autoware-interfaces/#time-stamp","text":"Clarify what the timestamp indicates. for example, send time, measurement time, update time, etc. Consider having multiple timestamps if necessary. Use std_msgs/msg/Header when using ROS transform. Also consider whether the header is common to all data, independent for each data, or additional timestamp is required.","title":"Time Stamp"},{"location":"design/autoware-interfaces/#request-header","text":"Currently, there is no required header.","title":"Request Header"},{"location":"design/autoware-interfaces/#response-status","text":"The interfaces whose communication method is Function Call use a common response status to unify the error format. For those interfaces, include the ResponseStatus shown below in the response with the name status. The data status.summary.code is the execution result of the interface, and the caller branches the process according to this value. Others are for the users and should not be used directly by the program. These data are primarily used to provide users with solution tips and to ask the developer for the cause of the error. The typical use of the field details is when an interface calls other interfaces. That interface stores response statuses in details , then merges them and sets the result to summary . This allows the developer to know which component was causing the error by checking details . ResponseStatus Name Type Description summary ResponseStatusDetail status summary details ResponseStatusDetail Array status details ResponseStatusDetail Name Type Description code uint32 response status code component string the component that caused the error message string error message description string error information such as detailed message and document URL ResponseStatusCode Group Code Description 0x0000 0x0000 UNKNOWN T.B.D. T.B.D. OK T.B.D. T.B.D. SUCCESS T.B.D. T.B.D. ACCEPTED T.B.D. T.B.D. NO_EFFECT T.B.D. T.B.D. UNAVAILABLE T.B.D. T.B.D. WARNING T.B.D. T.B.D. ERROR T.B.D. T.B.D. FORBIDDEN T.B.D. T.B.D. BAD_REQUEST T.B.D. T.B.D. NOT_SUPPORTED T.B.D. T.B.D. TIMEOUT","title":"Response Status"},{"location":"design/autoware-interfaces/#concern-assumption-and-limitation","text":"The applications use the version information provided by AD API to check compatibility. Unknown versions are also treated as available as long as the major versions match (excluding major version 0). Compatibility between AD API and the component interface is assumed to be maintained by the version management system. If an unintended behavior of AD API is detected, the application should take appropriate action. Autoware tries to keep working as long as possible, but it is not guaranteed to be safe. Safety should be considered for the entire system, including the applications.","title":"Concern, Assumption, and Limitation"},{"location":"design/autoware-interfaces/ad-api/","text":"AD API # Warning Under Construction","title":"AD API"},{"location":"design/autoware-interfaces/ad-api/#ad-api","text":"Warning Under Construction","title":"AD API"},{"location":"design/autoware-interfaces/components/","text":"Component interfaces # Warning Under Construction","title":"Component interfaces"},{"location":"design/autoware-interfaces/components/#component-interfaces","text":"Warning Under Construction","title":"Component interfaces"},{"location":"design/autoware-interfaces/components/control/","text":"Control # Inputs # Vehicle kinematic state # Current position and orientation of ego. Published by the Localization module. nav_msgs/Odometry std_msgs/Header header string child_frame_id geometry_msgs/PoseWithCovariance pose geometry_msgs/TwistWithCovariance twist Trajectory # trajectory to be followed by the controller. See Outputs of Planning. Steering Status # Current steering of the ego vehicle. Published by the Vehicle Interface. Steering message ( github discussion ). builtin_interfaces::msg::Time stamp float32 steering_angle Actuation Status # Actuation status of the ego vehicle for acceleration, steering, and brake. TODO This represents the reported physical efforts exerted by the vehicle actuators. Published by the Vehicle Interface. ActuationStatus ( github discussion ). builtin_interfaces::msg::Time stamp float32 acceleration float32 steering Output # Vehicle Control Command # A motion signal to drive the vehicle, achieved by the low-level controller in the vehicle layer. Used by the Vehicle Interface. [autoware_auto_control_msgs/AckermannControlCommand]( https://gitlab.com/autowarefoundation/autoware.auto/autoware_auto_msgs/-/blob/master/autoware_auto_control_msgs/msg/AckermannControlCommand.idl builtin_interfaces::msg::Time stamp autoware_auto_control_msgs/AckermannLateralCommand lateral builtin_interfaces::msg::Time stamp float steering_tire_angle float steering_tire_rotation_rate autoware_auto_control_msgs/LongitudinalCommand longitudinal builtin_interfaces::msg::Time stamp builtin_interfaces::msg::Duration duration builtin_interfaces::msg::Duration time_step float[] speeds float[] accelerations float[] jerks","title":"Control"},{"location":"design/autoware-interfaces/components/control/#control","text":"","title":"Control"},{"location":"design/autoware-interfaces/components/control/#inputs","text":"","title":"Inputs"},{"location":"design/autoware-interfaces/components/control/#vehicle-kinematic-state","text":"Current position and orientation of ego. Published by the Localization module. nav_msgs/Odometry std_msgs/Header header string child_frame_id geometry_msgs/PoseWithCovariance pose geometry_msgs/TwistWithCovariance twist","title":"Vehicle kinematic state"},{"location":"design/autoware-interfaces/components/control/#trajectory","text":"trajectory to be followed by the controller. See Outputs of Planning.","title":"Trajectory"},{"location":"design/autoware-interfaces/components/control/#steering-status","text":"Current steering of the ego vehicle. Published by the Vehicle Interface. Steering message ( github discussion ). builtin_interfaces::msg::Time stamp float32 steering_angle","title":"Steering Status"},{"location":"design/autoware-interfaces/components/control/#actuation-status","text":"Actuation status of the ego vehicle for acceleration, steering, and brake. TODO This represents the reported physical efforts exerted by the vehicle actuators. Published by the Vehicle Interface. ActuationStatus ( github discussion ). builtin_interfaces::msg::Time stamp float32 acceleration float32 steering","title":"Actuation Status"},{"location":"design/autoware-interfaces/components/control/#output","text":"","title":"Output"},{"location":"design/autoware-interfaces/components/control/#vehicle-control-command","text":"A motion signal to drive the vehicle, achieved by the low-level controller in the vehicle layer. Used by the Vehicle Interface. [autoware_auto_control_msgs/AckermannControlCommand]( https://gitlab.com/autowarefoundation/autoware.auto/autoware_auto_msgs/-/blob/master/autoware_auto_control_msgs/msg/AckermannControlCommand.idl builtin_interfaces::msg::Time stamp autoware_auto_control_msgs/AckermannLateralCommand lateral builtin_interfaces::msg::Time stamp float steering_tire_angle float steering_tire_rotation_rate autoware_auto_control_msgs/LongitudinalCommand longitudinal builtin_interfaces::msg::Time stamp builtin_interfaces::msg::Duration duration builtin_interfaces::msg::Duration time_step float[] speeds float[] accelerations float[] jerks","title":"Vehicle Control Command"},{"location":"design/autoware-interfaces/components/planning/","text":"Planning # Inputs # 3D Object Predictions # set of perceived objects around ego that need to be avoided when planning a trajectory. Published by the Perception module. autoware_auto_perception_msgs/msg/PredictedObjects std_msgs/Header header sequence< autoware_auto_perception_msgs::msg::PredictedObject > objects unique_identifier_msgs::msg::UUID uuid float existence_probability sequence< autoware_auto_perception_msgs::msg::ObjectClassification > classification uint8 classification float probability autoware_auto_perception_msgs::msg::PredictedObjectKinematics kinematics geometry_msgs::msg::PoseWithCovariance initial_pose geometry_msgs::msg::TwistWithCovariance geometry_msgs::msg::AccelWithCovariance initial_acceleration sequence< autoware_auto_perception_msgs::msg::PredictedPath , 10> predicted_paths sequence< geometry_msgs::msg::Pose , 100> path builtin_interfaces::msg::Duration time_step float confidence sequence< autoware_auto_perception_msgs::msg::Shape , 5> shape geometry_msgs::msg::Polygon polygon float height Traffic Light Response # Service response with traffic light information. The message definition is under discussion. TrafficLightResponse uint64 traffic_light_id uint8 traffic_light_state With the traffic_light_state being one of the following GREEN = 1 GREEN_BLINKING = 2 YELLOW = 3 YELLOW_BLINKING = 4 RED = 5 RED_BLINKING = 6 OFF = 7 UNKNOWN = 8 Vehicle kinematic state # current position and orientation of ego. Published by the Localization module. VehicleKinematicState nav_msgs/Odometry std_msgs/Header header string child_frame_id geometry_msgs/PoseWithCovariance pose geometry_msgs/TwistWithCovariance twist Lanelet2 Map # map of the environment where the planning takes place. Published by the Map Server. autoware_auto_mapping_msgs/msg/HADMapBin std_msgs::msg::Header header uint8 map_format string format_version string map_version sequence < uint8 > data Goal Pose # target pose of ego. Published by the User Interface. geometry_msgs/PoseStamped Engagement Response # TBD. The message definition is under discussion. Error status # a status corresponding to the current state of Autoware. Used by the Vehicle Interface to switch between different modes in case of emergency. Published by the Diagnostic Manager. autoware_auto_system_msgs/msg/EmergencyState builtin_interfaces::msg::Time stamp uint8 state With the state being one of the following: NORMAL = 1 OVERRIDE_REQUESTING = 2 MRM_OPERATING = 3 MRM_SUCCEEDED = 4 MRM_FAILED = 5 [TODO] original design for these messages: diagnostic manager also publishes an overriding emergency control command ( Add the monitoring system related messages - Autoware.Auto ). Possible new design: gate of the vehicle interface switches to the emergency control command (generated by another controller) when receiving an OVERRIDE_REQUESTING message. The message definition is under discussion. Outputs # Traffic Light Query # service request for the state of a specific traffic light. Sent to the Perception module. uint64 traffic_light_id The message definition is under discussion. Trajectory # A sequence of space and velocity points to be followed by the controller. autoware_auto_planning_msgs/Trajectory std_msgs/Header header sequence< autoware_auto_planning_msgs::msg::TrajectoryPoint , 100> points builtin_interfaces::msg::Duration time_from_start geometry_msgs::msg::Pose pose float longitudinal_velocity_mps float lateral_velocity_mps float acceleration_mps2 float heading_rate_rps float front_wheel_angle_rad float rear_wheel_angle_rad Vehicle Signal Commands # Commands for various elements of the vehicle unrelated to motion. Sent to the Vehicle Interface. (See autoware_auto_vehicle_msgs for the definition.) HandBrake Command Hazard Lights Command Headlights Command Horn Command Stationary Locking Command Turn Indicator Command Wipers Command Missions Status # TBD. The message definition is under discussion. Engagement Request # TBD, The message definition is under discussion.","title":"Planning"},{"location":"design/autoware-interfaces/components/planning/#planning","text":"","title":"Planning"},{"location":"design/autoware-interfaces/components/planning/#inputs","text":"","title":"Inputs"},{"location":"design/autoware-interfaces/components/planning/#3d-object-predictions","text":"set of perceived objects around ego that need to be avoided when planning a trajectory. Published by the Perception module. autoware_auto_perception_msgs/msg/PredictedObjects std_msgs/Header header sequence< autoware_auto_perception_msgs::msg::PredictedObject > objects unique_identifier_msgs::msg::UUID uuid float existence_probability sequence< autoware_auto_perception_msgs::msg::ObjectClassification > classification uint8 classification float probability autoware_auto_perception_msgs::msg::PredictedObjectKinematics kinematics geometry_msgs::msg::PoseWithCovariance initial_pose geometry_msgs::msg::TwistWithCovariance geometry_msgs::msg::AccelWithCovariance initial_acceleration sequence< autoware_auto_perception_msgs::msg::PredictedPath , 10> predicted_paths sequence< geometry_msgs::msg::Pose , 100> path builtin_interfaces::msg::Duration time_step float confidence sequence< autoware_auto_perception_msgs::msg::Shape , 5> shape geometry_msgs::msg::Polygon polygon float height","title":"3D Object Predictions"},{"location":"design/autoware-interfaces/components/planning/#traffic-light-response","text":"Service response with traffic light information. The message definition is under discussion. TrafficLightResponse uint64 traffic_light_id uint8 traffic_light_state With the traffic_light_state being one of the following GREEN = 1 GREEN_BLINKING = 2 YELLOW = 3 YELLOW_BLINKING = 4 RED = 5 RED_BLINKING = 6 OFF = 7 UNKNOWN = 8","title":"Traffic Light Response"},{"location":"design/autoware-interfaces/components/planning/#vehicle-kinematic-state","text":"current position and orientation of ego. Published by the Localization module. VehicleKinematicState nav_msgs/Odometry std_msgs/Header header string child_frame_id geometry_msgs/PoseWithCovariance pose geometry_msgs/TwistWithCovariance twist","title":"Vehicle kinematic state"},{"location":"design/autoware-interfaces/components/planning/#lanelet2-map","text":"map of the environment where the planning takes place. Published by the Map Server. autoware_auto_mapping_msgs/msg/HADMapBin std_msgs::msg::Header header uint8 map_format string format_version string map_version sequence < uint8 > data","title":"Lanelet2 Map"},{"location":"design/autoware-interfaces/components/planning/#goal-pose","text":"target pose of ego. Published by the User Interface. geometry_msgs/PoseStamped","title":"Goal Pose"},{"location":"design/autoware-interfaces/components/planning/#engagement-response","text":"TBD. The message definition is under discussion.","title":"Engagement Response"},{"location":"design/autoware-interfaces/components/planning/#error-status","text":"a status corresponding to the current state of Autoware. Used by the Vehicle Interface to switch between different modes in case of emergency. Published by the Diagnostic Manager. autoware_auto_system_msgs/msg/EmergencyState builtin_interfaces::msg::Time stamp uint8 state With the state being one of the following: NORMAL = 1 OVERRIDE_REQUESTING = 2 MRM_OPERATING = 3 MRM_SUCCEEDED = 4 MRM_FAILED = 5 [TODO] original design for these messages: diagnostic manager also publishes an overriding emergency control command ( Add the monitoring system related messages - Autoware.Auto ). Possible new design: gate of the vehicle interface switches to the emergency control command (generated by another controller) when receiving an OVERRIDE_REQUESTING message. The message definition is under discussion.","title":"Error status"},{"location":"design/autoware-interfaces/components/planning/#outputs","text":"","title":"Outputs"},{"location":"design/autoware-interfaces/components/planning/#traffic-light-query","text":"service request for the state of a specific traffic light. Sent to the Perception module. uint64 traffic_light_id The message definition is under discussion.","title":"Traffic Light Query"},{"location":"design/autoware-interfaces/components/planning/#trajectory","text":"A sequence of space and velocity points to be followed by the controller. autoware_auto_planning_msgs/Trajectory std_msgs/Header header sequence< autoware_auto_planning_msgs::msg::TrajectoryPoint , 100> points builtin_interfaces::msg::Duration time_from_start geometry_msgs::msg::Pose pose float longitudinal_velocity_mps float lateral_velocity_mps float acceleration_mps2 float heading_rate_rps float front_wheel_angle_rad float rear_wheel_angle_rad","title":"Trajectory"},{"location":"design/autoware-interfaces/components/planning/#vehicle-signal-commands","text":"Commands for various elements of the vehicle unrelated to motion. Sent to the Vehicle Interface. (See autoware_auto_vehicle_msgs for the definition.) HandBrake Command Hazard Lights Command Headlights Command Horn Command Stationary Locking Command Turn Indicator Command Wipers Command","title":"Vehicle Signal Commands"},{"location":"design/autoware-interfaces/components/planning/#missions-status","text":"TBD. The message definition is under discussion.","title":"Missions Status"},{"location":"design/autoware-interfaces/components/planning/#engagement-request","text":"TBD, The message definition is under discussion.","title":"Engagement Request"},{"location":"design/autoware-interfaces/components/vehicle-dimensions/","text":"Vehicle dimensions # Vehicle axes and base_link # The base_link frame is used very frequently throughout the stack, and is in the center of the rear axle. Localization module outputs the map to base_link transformation. Planning module plans the poses for where the base_link frame should be in the future. Control module tries to fit base_link to incoming poses. Vehicle dimensions # wheelbase # The distance between front and rear axles. track_width # The distance between left and right wheels. Overhangs # Overhangs are part of the minimum safety box calculation. When measuring overhangs, side mirrors, protruding sensors and wheels should be taken into consideration. left_overhang # The distance between the axis centers of the left wheels and the left-most point of the vehicle. right_overhang # The distance between the axis centers of the right wheels and the right-most point of the vehicle. front_overhang # The distance between the front axle and the foremost point of the vehicle. rear_overhang # The distance between the rear axle and the rear-most point of the vehicle. vehicle_length # Total length of the vehicle. Calculated by front_overhang + wheelbase + rear_overhang vehicle_width # Total width of the vehicle. Calculated by left_overhang + track_width + right_overhang Wheel parameters # wheel_width # The lateral width of a wheel tire, primarily used for dead reckoning. wheel_radius # The radius of the wheel, primarily used for dead reckoning. polygon_footprint # The polygon defines the minimum collision area for the vehicle. The points should be ordered clockwise, with the origin on the base_link . Wheel orientations # If the vehicle is going forward, a positive wheel angle will result in the vehicle turning left. Autoware assumes the rear wheels don't turn on z axis. Notice # The vehicle used in the illustrations was created by xvlblo22 and is from https://www.turbosquid.com/3d-models/modular-sedan-3d-model-1590886 .","title":"Vehicle dimensions"},{"location":"design/autoware-interfaces/components/vehicle-dimensions/#vehicle-dimensions","text":"","title":"Vehicle dimensions"},{"location":"design/autoware-interfaces/components/vehicle-dimensions/#vehicle-axes-and-base_link","text":"The base_link frame is used very frequently throughout the stack, and is in the center of the rear axle. Localization module outputs the map to base_link transformation. Planning module plans the poses for where the base_link frame should be in the future. Control module tries to fit base_link to incoming poses.","title":"Vehicle axes and base_link"},{"location":"design/autoware-interfaces/components/vehicle-dimensions/#vehicle-dimensions_1","text":"","title":"Vehicle dimensions"},{"location":"design/autoware-interfaces/components/vehicle-dimensions/#wheelbase","text":"The distance between front and rear axles.","title":"wheelbase"},{"location":"design/autoware-interfaces/components/vehicle-dimensions/#track_width","text":"The distance between left and right wheels.","title":"track_width"},{"location":"design/autoware-interfaces/components/vehicle-dimensions/#overhangs","text":"Overhangs are part of the minimum safety box calculation. When measuring overhangs, side mirrors, protruding sensors and wheels should be taken into consideration.","title":"Overhangs"},{"location":"design/autoware-interfaces/components/vehicle-dimensions/#left_overhang","text":"The distance between the axis centers of the left wheels and the left-most point of the vehicle.","title":"left_overhang"},{"location":"design/autoware-interfaces/components/vehicle-dimensions/#right_overhang","text":"The distance between the axis centers of the right wheels and the right-most point of the vehicle.","title":"right_overhang"},{"location":"design/autoware-interfaces/components/vehicle-dimensions/#front_overhang","text":"The distance between the front axle and the foremost point of the vehicle.","title":"front_overhang"},{"location":"design/autoware-interfaces/components/vehicle-dimensions/#rear_overhang","text":"The distance between the rear axle and the rear-most point of the vehicle.","title":"rear_overhang"},{"location":"design/autoware-interfaces/components/vehicle-dimensions/#vehicle_length","text":"Total length of the vehicle. Calculated by front_overhang + wheelbase + rear_overhang","title":"vehicle_length"},{"location":"design/autoware-interfaces/components/vehicle-dimensions/#vehicle_width","text":"Total width of the vehicle. Calculated by left_overhang + track_width + right_overhang","title":"vehicle_width"},{"location":"design/autoware-interfaces/components/vehicle-dimensions/#wheel-parameters","text":"","title":"Wheel parameters"},{"location":"design/autoware-interfaces/components/vehicle-dimensions/#wheel_width","text":"The lateral width of a wheel tire, primarily used for dead reckoning.","title":"wheel_width"},{"location":"design/autoware-interfaces/components/vehicle-dimensions/#wheel_radius","text":"The radius of the wheel, primarily used for dead reckoning.","title":"wheel_radius"},{"location":"design/autoware-interfaces/components/vehicle-dimensions/#polygon_footprint","text":"The polygon defines the minimum collision area for the vehicle. The points should be ordered clockwise, with the origin on the base_link .","title":"polygon_footprint"},{"location":"design/autoware-interfaces/components/vehicle-dimensions/#wheel-orientations","text":"If the vehicle is going forward, a positive wheel angle will result in the vehicle turning left. Autoware assumes the rear wheels don't turn on z axis.","title":"Wheel orientations"},{"location":"design/autoware-interfaces/components/vehicle-dimensions/#notice","text":"The vehicle used in the illustrations was created by xvlblo22 and is from https://www.turbosquid.com/3d-models/modular-sedan-3d-model-1590886 .","title":"Notice"},{"location":"design/autoware-interfaces/components/vehicle-interface/","text":"Vehicle Interface # The Vehicle Interface receives the Vehicle Signal Commands and Vehicle Control Commands and publishes the vehicle status. It also communicates with vehicle by the vehicle-specific protocol. The Gate switches multiple Vehicle Control Commands . These signals include autonomous diving command, joystick, remote control, and emergency operation, etc. The Adapter converts generalized control command (target steering, steering rate, velocity, acceleration, jerk) into vehicle-specific control values (steering-torque, wheel-torque, voltage, pressure, accel pedal position, etc). Inputs # Error status # (See Inputs of Planning.) Vehicle Control Command # (See Output of Control.) Vehicle Signals Commands # Commands for various elements of the vehicle unrelated to motion. Published by the Planning module. Outputs # Vehicle Signal Reports # Reports for various elements of the vehicle unrelated to motion. Published by the Vehicle Interface. Vehicle Odometry # Odometry of the vehicle. Used by the Localization module to update the pose of the vehicle in the map. geometry_msgs/TwistWithCovarianceStamped odometry Steering Status # Steering of the ego vehicle. Published by the Vehicle Interface. Steering message ( github discussion ). builtin_interfaces::msg::Time stamp float32 steering_angle Actuation Status # Actuation status of the ego vehicle for acceleration, steering, and brake. This represents the reported physical efforts exerted by the vehicle actuators. Published by the Vehicle Interface. ActuationStatus ( github discussion ). builtin_interfaces::msg::Time stamp float32 acceleration float32 steering float32 brake The message definition is under discussion. Actuation Command # Actuation command sent to the ego vehicle. This represents the requested physical efforts to be exerted by the vehicle actuators. Published by the Vehicle Interface as generated by the adapter. ActuationCommand ( github discussion .) builtin_interfaces::msg::Time stamp float32 acceleration float32 steering float32 brake The message definition is under discussion. Vehicle Communication # Vehicle specific messages protocol like CAN (Controller Area Network).","title":"Vehicle Interface"},{"location":"design/autoware-interfaces/components/vehicle-interface/#vehicle-interface","text":"The Vehicle Interface receives the Vehicle Signal Commands and Vehicle Control Commands and publishes the vehicle status. It also communicates with vehicle by the vehicle-specific protocol. The Gate switches multiple Vehicle Control Commands . These signals include autonomous diving command, joystick, remote control, and emergency operation, etc. The Adapter converts generalized control command (target steering, steering rate, velocity, acceleration, jerk) into vehicle-specific control values (steering-torque, wheel-torque, voltage, pressure, accel pedal position, etc).","title":"Vehicle Interface"},{"location":"design/autoware-interfaces/components/vehicle-interface/#inputs","text":"","title":"Inputs"},{"location":"design/autoware-interfaces/components/vehicle-interface/#error-status","text":"(See Inputs of Planning.)","title":"Error status"},{"location":"design/autoware-interfaces/components/vehicle-interface/#vehicle-control-command","text":"(See Output of Control.)","title":"Vehicle Control Command"},{"location":"design/autoware-interfaces/components/vehicle-interface/#vehicle-signals-commands","text":"Commands for various elements of the vehicle unrelated to motion. Published by the Planning module.","title":"Vehicle Signals Commands"},{"location":"design/autoware-interfaces/components/vehicle-interface/#outputs","text":"","title":"Outputs"},{"location":"design/autoware-interfaces/components/vehicle-interface/#vehicle-signal-reports","text":"Reports for various elements of the vehicle unrelated to motion. Published by the Vehicle Interface.","title":"Vehicle Signal Reports"},{"location":"design/autoware-interfaces/components/vehicle-interface/#vehicle-odometry","text":"Odometry of the vehicle. Used by the Localization module to update the pose of the vehicle in the map. geometry_msgs/TwistWithCovarianceStamped odometry","title":"Vehicle Odometry"},{"location":"design/autoware-interfaces/components/vehicle-interface/#steering-status","text":"Steering of the ego vehicle. Published by the Vehicle Interface. Steering message ( github discussion ). builtin_interfaces::msg::Time stamp float32 steering_angle","title":"Steering Status"},{"location":"design/autoware-interfaces/components/vehicle-interface/#actuation-status","text":"Actuation status of the ego vehicle for acceleration, steering, and brake. This represents the reported physical efforts exerted by the vehicle actuators. Published by the Vehicle Interface. ActuationStatus ( github discussion ). builtin_interfaces::msg::Time stamp float32 acceleration float32 steering float32 brake The message definition is under discussion.","title":"Actuation Status"},{"location":"design/autoware-interfaces/components/vehicle-interface/#actuation-command","text":"Actuation command sent to the ego vehicle. This represents the requested physical efforts to be exerted by the vehicle actuators. Published by the Vehicle Interface as generated by the adapter. ActuationCommand ( github discussion .) builtin_interfaces::msg::Time stamp float32 acceleration float32 steering float32 brake The message definition is under discussion.","title":"Actuation Command"},{"location":"design/autoware-interfaces/components/vehicle-interface/#vehicle-communication","text":"Vehicle specific messages protocol like CAN (Controller Area Network).","title":"Vehicle Communication"},{"location":"design/configuration-management/","text":"Configuration management # Warning Under Construction","title":"Configuration management"},{"location":"design/configuration-management/#configuration-management","text":"Warning Under Construction","title":"Configuration management"},{"location":"design/configuration-management/development-process/","text":"Development process # Warning Under Construction","title":"Development process"},{"location":"design/configuration-management/development-process/#development-process","text":"Warning Under Construction","title":"Development process"},{"location":"design/configuration-management/release-process/","text":"Release process # Warning Under Construction","title":"Release process"},{"location":"design/configuration-management/release-process/#release-process","text":"Warning Under Construction","title":"Release process"},{"location":"design/configuration-management/repository-structure/","text":"Repository structure # Warning Under Construction","title":"Repository structure"},{"location":"design/configuration-management/repository-structure/#repository-structure","text":"Warning Under Construction","title":"Repository structure"},{"location":"how-to-guides/","text":"How-to guides # Advanced usage of colcon Integrate Autoware with your vehicle TODO: Write the following contents. Create an Autoware package Add a custom ROS message Debug Autoware etc.","title":"How-to guides"},{"location":"how-to-guides/#how-to-guides","text":"Advanced usage of colcon Integrate Autoware with your vehicle TODO: Write the following contents. Create an Autoware package Add a custom ROS message Debug Autoware etc.","title":"How-to guides"},{"location":"how-to-guides/advanced-usage-of-colcon/","text":"Advanced usage of colcon # This page shows some advanced and useful usage of colcon . If you need more detailed information, refer to the colcon documentation . Common mistakes # Do not run from other than the workspace root # It is important that you always run colcon build from the workspace root because colcon builds only under the current directory. If you have mistakenly built in a wrong directory, run rm -rf build/ install/ log/ to clean the generated files. Do not unnecessarily overlay workspaces # colcon overlays workspaces if you have sourced the setup.bash of other workspaces before building a workspace. You should take care of this especially when you have multiple workspaces. Run echo $COLCON_PREFIX_PATH to check whether workspaces are overlaid. If you find some workspaces are unnecessarily overlaid, remove all built files, restart the terminal to clean environment variables, and re-build the workspace. For more details about workspace overlaying , refer to the ROS2 documentation . Cleaning up the build artifacts # colcon sometimes causes errors of because of the old cache. To remove the cache and rebuild the workspace, run the following command: rm -rf build/ install/ In case you know what packages to remove: rm -rf { build,install } / { package_a,package_b } Selecting packages to build # To just build specified packages: colcon build --packages-select <package_name1> <package_name2> ... To build specified packages and their dependencies recursively: colcon build --packages-up-to <package_name1> <package_name2> ... You can also use these options for colcon test . Changing the optimization level # Set DCMAKE_BUILD_TYPE to change the optimization level. Warning If you specify DCMAKE_BUILD_TYPE=Debug or no DCMAKE_BUILD_TYPE is given for building the entire Autoware, it may be too slow to use. colcon build --cmake-args -DCMAKE_BUILD_TYPE = Debug colcon build --cmake-args -DCMAKE_BUILD_TYPE = RelWithDebInfo colcon build --cmake-args -DCMAKE_BUILD_TYPE = Release Changing the default configuration of colcon # Create $COLCON_HOME/defaults.yaml to change the default configuration. mkdir -p ~/.colcon cat << EOS > ~/.colcon/defaults.yaml { \"build\" : { \"symlink-install\" : true } } See here for more details. Generating compile_commands.json # compile_commands.json is used by IDEs/tools to analyze the build dependencies and symbol relationships. You can generate it with the flag DCMAKE_EXPORT_COMPILE_COMMANDS=1 : colcon build --cmake-args -DCMAKE_EXPORT_COMPILE_COMMANDS = 1 Seeing compiler commands # To see the compiler and linker invocations for a package, use VERBOSE=1 and --event-handlers console_cohesion+ : VERBOSE = 1 colcon build --packages-up-to <package_name> --event-handlers console_cohesion+ See here for other options. Using Ccache # Ccache can speed up recompilation. It is recommended to use it to save your time unless you have a specific reason not to do so. Install Ccache : sudo apt update && sudo apt install ccache Write the following in your .bashrc : export CC = \"/usr/lib/ccache/gcc\" export CXX = \"/usr/lib/ccache/g++\"","title":"Advanced usage of colcon"},{"location":"how-to-guides/advanced-usage-of-colcon/#advanced-usage-of-colcon","text":"This page shows some advanced and useful usage of colcon . If you need more detailed information, refer to the colcon documentation .","title":"Advanced usage of colcon"},{"location":"how-to-guides/advanced-usage-of-colcon/#common-mistakes","text":"","title":"Common mistakes"},{"location":"how-to-guides/advanced-usage-of-colcon/#do-not-run-from-other-than-the-workspace-root","text":"It is important that you always run colcon build from the workspace root because colcon builds only under the current directory. If you have mistakenly built in a wrong directory, run rm -rf build/ install/ log/ to clean the generated files.","title":"Do not run from other than the workspace root"},{"location":"how-to-guides/advanced-usage-of-colcon/#do-not-unnecessarily-overlay-workspaces","text":"colcon overlays workspaces if you have sourced the setup.bash of other workspaces before building a workspace. You should take care of this especially when you have multiple workspaces. Run echo $COLCON_PREFIX_PATH to check whether workspaces are overlaid. If you find some workspaces are unnecessarily overlaid, remove all built files, restart the terminal to clean environment variables, and re-build the workspace. For more details about workspace overlaying , refer to the ROS2 documentation .","title":"Do not unnecessarily overlay workspaces"},{"location":"how-to-guides/advanced-usage-of-colcon/#cleaning-up-the-build-artifacts","text":"colcon sometimes causes errors of because of the old cache. To remove the cache and rebuild the workspace, run the following command: rm -rf build/ install/ In case you know what packages to remove: rm -rf { build,install } / { package_a,package_b }","title":"Cleaning up the build artifacts"},{"location":"how-to-guides/advanced-usage-of-colcon/#selecting-packages-to-build","text":"To just build specified packages: colcon build --packages-select <package_name1> <package_name2> ... To build specified packages and their dependencies recursively: colcon build --packages-up-to <package_name1> <package_name2> ... You can also use these options for colcon test .","title":"Selecting packages to build"},{"location":"how-to-guides/advanced-usage-of-colcon/#changing-the-optimization-level","text":"Set DCMAKE_BUILD_TYPE to change the optimization level. Warning If you specify DCMAKE_BUILD_TYPE=Debug or no DCMAKE_BUILD_TYPE is given for building the entire Autoware, it may be too slow to use. colcon build --cmake-args -DCMAKE_BUILD_TYPE = Debug colcon build --cmake-args -DCMAKE_BUILD_TYPE = RelWithDebInfo colcon build --cmake-args -DCMAKE_BUILD_TYPE = Release","title":"Changing the optimization level"},{"location":"how-to-guides/advanced-usage-of-colcon/#changing-the-default-configuration-of-colcon","text":"Create $COLCON_HOME/defaults.yaml to change the default configuration. mkdir -p ~/.colcon cat << EOS > ~/.colcon/defaults.yaml { \"build\" : { \"symlink-install\" : true } } See here for more details.","title":"Changing the default configuration of colcon"},{"location":"how-to-guides/advanced-usage-of-colcon/#generating-compile_commandsjson","text":"compile_commands.json is used by IDEs/tools to analyze the build dependencies and symbol relationships. You can generate it with the flag DCMAKE_EXPORT_COMPILE_COMMANDS=1 : colcon build --cmake-args -DCMAKE_EXPORT_COMPILE_COMMANDS = 1","title":"Generating compile_commands.json"},{"location":"how-to-guides/advanced-usage-of-colcon/#seeing-compiler-commands","text":"To see the compiler and linker invocations for a package, use VERBOSE=1 and --event-handlers console_cohesion+ : VERBOSE = 1 colcon build --packages-up-to <package_name> --event-handlers console_cohesion+ See here for other options.","title":"Seeing compiler commands"},{"location":"how-to-guides/advanced-usage-of-colcon/#using-ccache","text":"Ccache can speed up recompilation. It is recommended to use it to save your time unless you have a specific reason not to do so. Install Ccache : sudo apt update && sudo apt install ccache Write the following in your .bashrc : export CC = \"/usr/lib/ccache/gcc\" export CXX = \"/usr/lib/ccache/g++\"","title":"Using Ccache"},{"location":"how-to-guides/how-to-integrate-autoware-with-your-vehicle/","text":"How to integrate Autoware with your vehicle # 1. Prepare your real vehicle hardware # Prerequisites for the vehicle: An onboard computer that satisfies the Autoware installation prerequisites The following devices attached Drive-by-wire interface LiDAR Optional: Inertial measurement unit Optional: Camera Optional: GNSS 2. Create maps # You need both a pointcloud map and a vector map in order to use Autoware. Create a pointcloud map # Use third-party tools such as a LiDAR-based SLAM (Simultaneous Localization And Mapping) package to create a pointcloud map in the .pcd format. Some examples are: HDL LIO-SAM LiDAR-SLAM (ROS2) Create vector map # Use third-party tools such as TIER IV's Vector Map Builder to create a Lanelet2 format .osm file. 3. Create your Autoware meta-repository # Create your Autoware meta-repository. One easy way is to fork autowarefoundation/autoware and clone it. Refer to GitHub Docs for how to fork a repository. git clone https://github.com/YOUR_NAME/autoware.git If you set up multiple types of vehicles, adding a suffix like \"autoware.vehicle_A\" or \"autoware.vehicle_B\" is recommended. 4. Create the description packages of your vehicle # Next, you need to create description packages that define the vehicle and sensor configuration of your vehicle. Create the following two packages: YOUR_VEHICLE_launch (see here for example) YOUR_SENSOR_KIT_launch (see here for example) Once created, you need to update the autoware.repos file of your cloned Autoware repository to refer to these two description packages. - # sensor_kit - sensor_kit/sample_sensor_kit_launch: - type: git - url: https://github.com/autowarefoundation/sample_sensor_kit_launch.git - version: main - # vehicle - vehicle/sample_vehicle_launch: - type: git - url: https://github.com/autowarefoundation/sample_vehicle_launch.git - version: main + # sensor_kit + sensor_kit/YOUR_SENSOR_KIT_launch: + type: git + url: https://github.com/YOUR_NAME/YOUR_SENSOR_KIT_launch.git + version: main + # vehicle + vehicle/YOUR_VEHICLE_launch: + type: git + url: https://github.com/YOUR_NAME/YOUR_VEHICLE_launch.git + version: main Adapt YOUR_VEHICLE_launch for autoware launching system # At YOUR_VEHICLE_description # Define URDF and parameters in the vehicle description package (refer to the sample vehicle description package for an example). At YOUR_VEHICLE_launch # Create a launch file (refer to the sample vehicle launch package for example). If you have multiple vehicles with the same hardware setup, you can specify vehicle_id to distinguish them. Adapt YOUR_SENSOR_KIT_description for autoware launching system # At YOUR_SENSOR_KIT_description # Define URDF and extrinsic parameters for all the sensors here (refer to the sample sensor kit description package for example). Note that you need to calibrate extrinsic parameters for all the sensors beforehand. At YOUR_SENSOR_KIT_launch # Create launch/sensing.launch.xml that launches the interfaces of all the sensors on the vehicle. (refer to the sample sensor kit launch package for example). Note At this point, you are now able to run Autoware's Planning Simulator to do a basic test of your vehicle and sensing packages. To do so, you need to build and install Autoware using your cloned repository. Follow the steps for either Docker or source installation (starting from the dependency installation step) and then run the following command: ros2 launch autoware_launch planning_simulator.launch.xml vehicle_model: = YOUR_VEHICLE sensor_kit: = YOUR_SENSOR_KIT map_path: = /PATH/TO/YOUR/MAP 5. Create a vehicle_interface package # You need to create an interface package for your vehicle. The package is expected to provide the following two functions. Receive command messages from vehicle_cmd_gate and drive the vehicle accordingly Send vehicle status information to Autoware You can find detailed information about the requirements of the vehicle_interface package in the Vehicle Interface design documentation . You can also refer to TIER IV's pacmod_interface repository as an example of a vehicle interface package. 6. Launch Autoware # This section briefly explains how to run your vehicle with Autoware. Install Autoware # Follow the installation steps of Autoware . Launch Autoware # Launch Autoware with the following command: ros2 launch autoware_launch autoware.launch.xml vehicle_model: = YOUR_VEHICLE sensor_kit: = YOUR_SENSOR_KIT map_path: = /PATH/TO/YOUR/MAP Set initial pose # If GNSS is available, Autoware automatically initializes the vehicle's pose. If not, you need to set the initial pose using the RViz GUI. Click the 2D Pose estimate button in the toolbar, or hit the P key In the 3D View pane, click and hold the left mouse button, and then drag to set the direction for the initial pose. Set goal pose # Set a goal pose for the ego vehicle. Click the 2D Nav Goal button in the toolbar, or hit the G key In the 3D View pane, click and hold the left mouse button, and then drag to set the direction for the goal pose. If successful, you will see the calculated planning path on RViz. Engage # In your terminal, execute the following command. source ~/autoware.YOURS/install/setup.bash ros2 topic pub /autoware.YOURS/engage autoware_auto_vehicle_msgs/msg/Engage \"engage: true\" -1 You can also engage via RViz with \"AutowareStatePanel\". The panel can be found in Panels > Add New Panel > tier4_state_rviz_plugin > AutowareStatePanel . Now the vehicle should drive along the calculated path! 7. Tune parameters for your vehicle & environment # You may need to tune your parameters depending on the domain in which you will operate your vehicle. If you have any issues or questions, feel free to create an Autoware Foundation GitHub Discussion in the Q&A category!","title":"How to integrate Autoware with your vehicle"},{"location":"how-to-guides/how-to-integrate-autoware-with-your-vehicle/#how-to-integrate-autoware-with-your-vehicle","text":"","title":"How to integrate Autoware with your vehicle"},{"location":"how-to-guides/how-to-integrate-autoware-with-your-vehicle/#1-prepare-your-real-vehicle-hardware","text":"Prerequisites for the vehicle: An onboard computer that satisfies the Autoware installation prerequisites The following devices attached Drive-by-wire interface LiDAR Optional: Inertial measurement unit Optional: Camera Optional: GNSS","title":"1. Prepare your real vehicle hardware"},{"location":"how-to-guides/how-to-integrate-autoware-with-your-vehicle/#2-create-maps","text":"You need both a pointcloud map and a vector map in order to use Autoware.","title":"2. Create maps"},{"location":"how-to-guides/how-to-integrate-autoware-with-your-vehicle/#create-a-pointcloud-map","text":"Use third-party tools such as a LiDAR-based SLAM (Simultaneous Localization And Mapping) package to create a pointcloud map in the .pcd format. Some examples are: HDL LIO-SAM LiDAR-SLAM (ROS2)","title":"Create a pointcloud map"},{"location":"how-to-guides/how-to-integrate-autoware-with-your-vehicle/#create-vector-map","text":"Use third-party tools such as TIER IV's Vector Map Builder to create a Lanelet2 format .osm file.","title":"Create vector map"},{"location":"how-to-guides/how-to-integrate-autoware-with-your-vehicle/#3-create-your-autoware-meta-repository","text":"Create your Autoware meta-repository. One easy way is to fork autowarefoundation/autoware and clone it. Refer to GitHub Docs for how to fork a repository. git clone https://github.com/YOUR_NAME/autoware.git If you set up multiple types of vehicles, adding a suffix like \"autoware.vehicle_A\" or \"autoware.vehicle_B\" is recommended.","title":"3. Create your Autoware meta-repository"},{"location":"how-to-guides/how-to-integrate-autoware-with-your-vehicle/#4-create-the-description-packages-of-your-vehicle","text":"Next, you need to create description packages that define the vehicle and sensor configuration of your vehicle. Create the following two packages: YOUR_VEHICLE_launch (see here for example) YOUR_SENSOR_KIT_launch (see here for example) Once created, you need to update the autoware.repos file of your cloned Autoware repository to refer to these two description packages. - # sensor_kit - sensor_kit/sample_sensor_kit_launch: - type: git - url: https://github.com/autowarefoundation/sample_sensor_kit_launch.git - version: main - # vehicle - vehicle/sample_vehicle_launch: - type: git - url: https://github.com/autowarefoundation/sample_vehicle_launch.git - version: main + # sensor_kit + sensor_kit/YOUR_SENSOR_KIT_launch: + type: git + url: https://github.com/YOUR_NAME/YOUR_SENSOR_KIT_launch.git + version: main + # vehicle + vehicle/YOUR_VEHICLE_launch: + type: git + url: https://github.com/YOUR_NAME/YOUR_VEHICLE_launch.git + version: main","title":"4. Create the description packages of your vehicle"},{"location":"how-to-guides/how-to-integrate-autoware-with-your-vehicle/#adapt-your_vehicle_launch-for-autoware-launching-system","text":"","title":"Adapt YOUR_VEHICLE_launch for autoware launching system"},{"location":"how-to-guides/how-to-integrate-autoware-with-your-vehicle/#at-your_vehicle_description","text":"Define URDF and parameters in the vehicle description package (refer to the sample vehicle description package for an example).","title":"At YOUR_VEHICLE_description"},{"location":"how-to-guides/how-to-integrate-autoware-with-your-vehicle/#at-your_vehicle_launch","text":"Create a launch file (refer to the sample vehicle launch package for example). If you have multiple vehicles with the same hardware setup, you can specify vehicle_id to distinguish them.","title":"At YOUR_VEHICLE_launch"},{"location":"how-to-guides/how-to-integrate-autoware-with-your-vehicle/#adapt-your_sensor_kit_description-for-autoware-launching-system","text":"","title":"Adapt YOUR_SENSOR_KIT_description for autoware launching system"},{"location":"how-to-guides/how-to-integrate-autoware-with-your-vehicle/#at-your_sensor_kit_description","text":"Define URDF and extrinsic parameters for all the sensors here (refer to the sample sensor kit description package for example). Note that you need to calibrate extrinsic parameters for all the sensors beforehand.","title":"At YOUR_SENSOR_KIT_description"},{"location":"how-to-guides/how-to-integrate-autoware-with-your-vehicle/#at-your_sensor_kit_launch","text":"Create launch/sensing.launch.xml that launches the interfaces of all the sensors on the vehicle. (refer to the sample sensor kit launch package for example). Note At this point, you are now able to run Autoware's Planning Simulator to do a basic test of your vehicle and sensing packages. To do so, you need to build and install Autoware using your cloned repository. Follow the steps for either Docker or source installation (starting from the dependency installation step) and then run the following command: ros2 launch autoware_launch planning_simulator.launch.xml vehicle_model: = YOUR_VEHICLE sensor_kit: = YOUR_SENSOR_KIT map_path: = /PATH/TO/YOUR/MAP","title":"At YOUR_SENSOR_KIT_launch"},{"location":"how-to-guides/how-to-integrate-autoware-with-your-vehicle/#5-create-a-vehicle_interface-package","text":"You need to create an interface package for your vehicle. The package is expected to provide the following two functions. Receive command messages from vehicle_cmd_gate and drive the vehicle accordingly Send vehicle status information to Autoware You can find detailed information about the requirements of the vehicle_interface package in the Vehicle Interface design documentation . You can also refer to TIER IV's pacmod_interface repository as an example of a vehicle interface package.","title":"5. Create a vehicle_interface package"},{"location":"how-to-guides/how-to-integrate-autoware-with-your-vehicle/#6-launch-autoware","text":"This section briefly explains how to run your vehicle with Autoware.","title":"6. Launch Autoware"},{"location":"how-to-guides/how-to-integrate-autoware-with-your-vehicle/#install-autoware","text":"Follow the installation steps of Autoware .","title":"Install Autoware"},{"location":"how-to-guides/how-to-integrate-autoware-with-your-vehicle/#launch-autoware","text":"Launch Autoware with the following command: ros2 launch autoware_launch autoware.launch.xml vehicle_model: = YOUR_VEHICLE sensor_kit: = YOUR_SENSOR_KIT map_path: = /PATH/TO/YOUR/MAP","title":"Launch Autoware"},{"location":"how-to-guides/how-to-integrate-autoware-with-your-vehicle/#set-initial-pose","text":"If GNSS is available, Autoware automatically initializes the vehicle's pose. If not, you need to set the initial pose using the RViz GUI. Click the 2D Pose estimate button in the toolbar, or hit the P key In the 3D View pane, click and hold the left mouse button, and then drag to set the direction for the initial pose.","title":"Set initial pose"},{"location":"how-to-guides/how-to-integrate-autoware-with-your-vehicle/#set-goal-pose","text":"Set a goal pose for the ego vehicle. Click the 2D Nav Goal button in the toolbar, or hit the G key In the 3D View pane, click and hold the left mouse button, and then drag to set the direction for the goal pose. If successful, you will see the calculated planning path on RViz.","title":"Set goal pose"},{"location":"how-to-guides/how-to-integrate-autoware-with-your-vehicle/#engage","text":"In your terminal, execute the following command. source ~/autoware.YOURS/install/setup.bash ros2 topic pub /autoware.YOURS/engage autoware_auto_vehicle_msgs/msg/Engage \"engage: true\" -1 You can also engage via RViz with \"AutowareStatePanel\". The panel can be found in Panels > Add New Panel > tier4_state_rviz_plugin > AutowareStatePanel . Now the vehicle should drive along the calculated path!","title":"Engage"},{"location":"how-to-guides/how-to-integrate-autoware-with-your-vehicle/#7-tune-parameters-for-your-vehicle-environment","text":"You may need to tune your parameters depending on the domain in which you will operate your vehicle. If you have any issues or questions, feel free to create an Autoware Foundation GitHub Discussion in the Q&A category!","title":"7. Tune parameters for your vehicle &amp; environment"},{"location":"installation/","text":"Installation # Target platforms # Autoware targets the platforms listed below. It may change in future versions of Autoware. The Autoware Foundation provides no support on other platforms than those listed below. Architecture # amd64 arm64 ROS version # ROS 2 Galactic ( active development ) ROS 2 Humble ( will be supported in 2022 ) Refer to REP-2000 for the system dependencies. Installing Autoware # There are two ways to set up Autoware. Choose one according to your preference. If any issues occur during installation, refer to the Support page . 1. Docker installation # Docker can ensure that all developers in a project have a common, consistent development environment. It is recommended for beginners, casual users, people who are unfamiliar with Ubuntu. Refer to the Docker installation guide for detailed steps. 2. Source installation # Source installation is for the cases where more granular control of the installation environment is needed. It is recommended for experienced users or people who want to customize their environment. Note that some problems may occur depending on your local environment. Refer to the source installation guide for detailed steps. Installing related tools # Some other tools are required depending on the evaluation you want to do. For example, to run an end-to-end simulation you need to install an appropriate simulator. See here for how to install the tools. Additional settings for developers # There are also tools and settings for developers, such as Shells or IDEs. See here for how to install the tools.","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#target-platforms","text":"Autoware targets the platforms listed below. It may change in future versions of Autoware. The Autoware Foundation provides no support on other platforms than those listed below.","title":"Target platforms"},{"location":"installation/#architecture","text":"amd64 arm64","title":"Architecture"},{"location":"installation/#ros-version","text":"ROS 2 Galactic ( active development ) ROS 2 Humble ( will be supported in 2022 ) Refer to REP-2000 for the system dependencies.","title":"ROS version"},{"location":"installation/#installing-autoware","text":"There are two ways to set up Autoware. Choose one according to your preference. If any issues occur during installation, refer to the Support page .","title":"Installing Autoware"},{"location":"installation/#1-docker-installation","text":"Docker can ensure that all developers in a project have a common, consistent development environment. It is recommended for beginners, casual users, people who are unfamiliar with Ubuntu. Refer to the Docker installation guide for detailed steps.","title":"1. Docker installation"},{"location":"installation/#2-source-installation","text":"Source installation is for the cases where more granular control of the installation environment is needed. It is recommended for experienced users or people who want to customize their environment. Note that some problems may occur depending on your local environment. Refer to the source installation guide for detailed steps.","title":"2. Source installation"},{"location":"installation/#installing-related-tools","text":"Some other tools are required depending on the evaluation you want to do. For example, to run an end-to-end simulation you need to install an appropriate simulator. See here for how to install the tools.","title":"Installing related tools"},{"location":"installation/#additional-settings-for-developers","text":"There are also tools and settings for developers, such as Shells or IDEs. See here for how to install the tools.","title":"Additional settings for developers"},{"location":"installation/additional-settings-for-developers/","text":"Additional settings for developers # ROS 2 settings # Colorizing logger output # By default, ROS 2 logger doesn't colorize the output. To colorize it, write the following in your .bashrc : export RCUTILS_COLORIZED_OUTPUT = 1 Customizing the format of logger output # By default, ROS 2 logger doesn't output detailed information such as file name, function name, or line number. To customize it, write the following in your .bashrc : export RCUTILS_CONSOLE_OUTPUT_FORMAT = \"[{severity} {time}] [{name}]: {message} ({function_name}() at {file_name}:{line_number})\" See here for more options. Enabling localhost-only communication # By default, ROS 2 communicates using multi-cast, which may unnecessarily increase the network traffic. To avoid it, write the following in your .bashrc : export ROS_LOCALHOST_ONLY = 1 Setting up ROS_DOMAIN_ID # ROS 2 uses ROS_DOMAIN_ID to create groups and communicate between machines in the groups. Since all ROS 2 nodes use domain ID 0 by default, it may cause unintended interference. To avoid it, set a different domain ID for each group in your .bashrc : # Replace X with the Domain ID you want to use # Domain ID should be a number in range [0, 101] (inclusive) export ROS_DOMAIN_ID = X See here for more information.","title":"Additional settings for developers"},{"location":"installation/additional-settings-for-developers/#additional-settings-for-developers","text":"","title":"Additional settings for developers"},{"location":"installation/additional-settings-for-developers/#ros-2-settings","text":"","title":"ROS 2 settings"},{"location":"installation/additional-settings-for-developers/#colorizing-logger-output","text":"By default, ROS 2 logger doesn't colorize the output. To colorize it, write the following in your .bashrc : export RCUTILS_COLORIZED_OUTPUT = 1","title":"Colorizing logger output"},{"location":"installation/additional-settings-for-developers/#customizing-the-format-of-logger-output","text":"By default, ROS 2 logger doesn't output detailed information such as file name, function name, or line number. To customize it, write the following in your .bashrc : export RCUTILS_CONSOLE_OUTPUT_FORMAT = \"[{severity} {time}] [{name}]: {message} ({function_name}() at {file_name}:{line_number})\" See here for more options.","title":"Customizing the format of logger output"},{"location":"installation/additional-settings-for-developers/#enabling-localhost-only-communication","text":"By default, ROS 2 communicates using multi-cast, which may unnecessarily increase the network traffic. To avoid it, write the following in your .bashrc : export ROS_LOCALHOST_ONLY = 1","title":"Enabling localhost-only communication"},{"location":"installation/additional-settings-for-developers/#setting-up-ros_domain_id","text":"ROS 2 uses ROS_DOMAIN_ID to create groups and communicate between machines in the groups. Since all ROS 2 nodes use domain ID 0 by default, it may cause unintended interference. To avoid it, set a different domain ID for each group in your .bashrc : # Replace X with the Domain ID you want to use # Domain ID should be a number in range [0, 101] (inclusive) export ROS_DOMAIN_ID = X See here for more information.","title":"Setting up ROS_DOMAIN_ID"},{"location":"installation/autoware/docker-installation/","text":"Docker installation # Info Since this page explains Docker-specific information, it is recommended to see Source installation as well if you need detailed information. Prerequisites # Git For NVIDIA Jetson devices, install JetPack >= 5.0 How to set up a development environment # Clone autowarefoundation/autoware and move to the directory. git clone https://github.com/autowarefoundation/autoware.git cd autoware You can install the dependencies either manually or using the provided Ansible script. Installing dependencies manually # Install Docker Engine Install Docker Compose Install NVIDIA Container Toolkit Install rocker Installing dependencies using Ansible # Be very careful with this method. Make sure you read and confirmed all the steps in the Ansible configuration before using it. If you've manually installed the dependencies, you can skip this section. ./setup-dev-env.sh docker You might need to log out and log back to make the current user able to use docker. How to set up a workspace # Warning Before proceeding, confirm and agree with the NVIDIA Deep Learning Container license . By pulling and using the Autoware Universe images, you accept the terms and conditions of the license. Launch a Docker container. For amd64 architecture computers with NVIDIA GPU: rocker --nvidia --x11 --user --volume $HOME /autoware -- ghcr.io/autowarefoundation/autoware-universe:latest If you want to run container without using NVIDIA GPU, or for arm64 architecture computers: rocker -e LIBGL_ALWAYS_SOFTWARE = 1 --x11 --user --volume $HOME /autoware -- ghcr.io/autowarefoundation/autoware-universe:latest For detailed reason could be found here See here for more advanced usage. After that, move to the workspace in the container: cd autoware Create the src directory and clone repositories into it. mkdir src vcs import src < autoware.repos Build the workspace. colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE = Release How to update a workspace # Update the Docker image. docker pull ghcr.io/autowarefoundation/autoware-universe:latest Launch a Docker container. For amd64 architecture computers: rocker --nvidia --x11 --user --volume $HOME /autoware -- ghcr.io/autowarefoundation/autoware-universe:latest If you want to run container without using NVIDIA GPU, or for arm64 architecture computers: rocker -e LIBGL_ALWAYS_SOFTWARE = 1 --x11 --user --volume $HOME /autoware -- ghcr.io/autowarefoundation/autoware-universe:latest Update the .repos file. cd autoware git pull Update the repositories. vcs import src < autoware.repos vcs pull src Build the workspace. colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE = Release Troubleshooting # Here are solutions for a few specific errors: cuda error: forward compatibility was attempted on non supported hw # When starting Docker with GPU support enabled for NVIDIA graphics, you may sometimes receive the following error: docker: Error response from daemon: OCI runtime create failed: container_linux.go:349: starting container process caused \"process_linux.go:449: container init caused \\\"process_linux.go:432: running prestart hook 0 caused \\\\\\\"error running hook: exit status 1, stdout: , stderr: nvidia-container-cli: initialization error: cuda error: forward compatibility was attempted on non supported hw\\\\\\\\n\\\\\\\"\\\"\" : unknown. ERROR: Command return non-zero exit code ( see above ) : 125 This usually indicates that a new NVIDIA graphics driver has been installed (usually via apt ) but the system has not yet been restarted. A similar message may appear if the graphics driver is not available, for example because of resuming after suspend. To fix this, restart your system after installing the new NVIDIA driver. Docker with NVIDIA gpu fails to start Autoware on arm64 devices # When starting Docker with GPU support enabled for NVIDIA graphics on arm64 devices, e.g. NVIDIA jetson AGX xavier, you may receive the following error: nvidia@xavier:~$ rocker --nvidia --x11 --user --volume $HOME /autoware -- ghcr.io/autowarefoundation/autoware-universe:latest-arm64 ... Collecting staticx == 0 .12.3 Downloading https://files.pythonhosted.org/packages/92/ff/d9960ea1f9db48d6044a24ee0f3d78d07bcaddf96eb0c0e8806f941fb7d3/staticx-0.12.3.tar.gz ( 68kB ) Complete output from command python setup.py egg_info: Traceback ( most recent call last ) : File \"\" , line 1 , in File \"/tmp/pip-install-m_nm8mya/staticx/setup.py\" , line 4 , in from wheel.bdist_wheel import bdist_wheel ModuleNotFoundError: No module named 'wheel' Command \"python setup.py egg_info\" failed with error code 1 in /tmp/pip-install-m_nm8mya/staticx/ ... This error exists in current version of rocker tool, which relates to the os_detection function of rocker. To fix this error, temporary modification of rocker source code is required, which is not recommended. At current stage, it is recommended to run docker without NVIDIA gpu enabled for arm64 devices: rocker -e LIBGL_ALWAYS_SOFTWARE = 1 --x11 --user --volume $HOME /autoware -- ghcr.io/autowarefoundation/autoware-universe:latest This tutorial will be updated after official fix from rocker. Tips # Non-native arm64 System # This section describes a process to run arm64 systems on amd64 systems using qemu-user-static . Initially, your system is usually incompatible with arm64 systems. To check that: $ docker run --rm -t arm64v8/ubuntu uname -m WARNING: The requested image's platform (linux/arm64/v8) does not match the detected host platform (linux/amd64) and no specific platform was requested standard_init_linux.go:228: exec user process caused: exec format error Installing qemu-user-static enables us to run arm64 images on amd64 systems. $ sudo apt-get install qemu-user-static $ docker run --rm --privileged multiarch/qemu-user-static --reset -p yes $ docker run --rm -t arm64v8/ubuntu uname -m WARNING: The requested image's platform (linux/arm64/v8) does not match the detected host platform (linux/amd64) and no specific platform was requested aarch64 To run Autoware's Docker images of arm64 architecture, add the suffix -arm64 . $ docker run --rm -it ghcr.io/autowarefoundation/autoware-universe:latest-arm64 WARNING: The requested image's platform (linux/arm64) does not match the detected host platform (linux/amd64) and no specific platform was requested root@5b71391ad50f:/autoware#","title":"Docker installation"},{"location":"installation/autoware/docker-installation/#docker-installation","text":"Info Since this page explains Docker-specific information, it is recommended to see Source installation as well if you need detailed information.","title":"Docker installation"},{"location":"installation/autoware/docker-installation/#prerequisites","text":"Git For NVIDIA Jetson devices, install JetPack >= 5.0","title":"Prerequisites"},{"location":"installation/autoware/docker-installation/#how-to-set-up-a-development-environment","text":"Clone autowarefoundation/autoware and move to the directory. git clone https://github.com/autowarefoundation/autoware.git cd autoware You can install the dependencies either manually or using the provided Ansible script.","title":"How to set up a development environment"},{"location":"installation/autoware/docker-installation/#installing-dependencies-manually","text":"Install Docker Engine Install Docker Compose Install NVIDIA Container Toolkit Install rocker","title":"Installing dependencies manually"},{"location":"installation/autoware/docker-installation/#installing-dependencies-using-ansible","text":"Be very careful with this method. Make sure you read and confirmed all the steps in the Ansible configuration before using it. If you've manually installed the dependencies, you can skip this section. ./setup-dev-env.sh docker You might need to log out and log back to make the current user able to use docker.","title":"Installing dependencies using Ansible"},{"location":"installation/autoware/docker-installation/#how-to-set-up-a-workspace","text":"Warning Before proceeding, confirm and agree with the NVIDIA Deep Learning Container license . By pulling and using the Autoware Universe images, you accept the terms and conditions of the license. Launch a Docker container. For amd64 architecture computers with NVIDIA GPU: rocker --nvidia --x11 --user --volume $HOME /autoware -- ghcr.io/autowarefoundation/autoware-universe:latest If you want to run container without using NVIDIA GPU, or for arm64 architecture computers: rocker -e LIBGL_ALWAYS_SOFTWARE = 1 --x11 --user --volume $HOME /autoware -- ghcr.io/autowarefoundation/autoware-universe:latest For detailed reason could be found here See here for more advanced usage. After that, move to the workspace in the container: cd autoware Create the src directory and clone repositories into it. mkdir src vcs import src < autoware.repos Build the workspace. colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE = Release","title":"How to set up a workspace"},{"location":"installation/autoware/docker-installation/#how-to-update-a-workspace","text":"Update the Docker image. docker pull ghcr.io/autowarefoundation/autoware-universe:latest Launch a Docker container. For amd64 architecture computers: rocker --nvidia --x11 --user --volume $HOME /autoware -- ghcr.io/autowarefoundation/autoware-universe:latest If you want to run container without using NVIDIA GPU, or for arm64 architecture computers: rocker -e LIBGL_ALWAYS_SOFTWARE = 1 --x11 --user --volume $HOME /autoware -- ghcr.io/autowarefoundation/autoware-universe:latest Update the .repos file. cd autoware git pull Update the repositories. vcs import src < autoware.repos vcs pull src Build the workspace. colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE = Release","title":"How to update a workspace"},{"location":"installation/autoware/docker-installation/#troubleshooting","text":"Here are solutions for a few specific errors:","title":"Troubleshooting"},{"location":"installation/autoware/docker-installation/#cuda-error-forward-compatibility-was-attempted-on-non-supported-hw","text":"When starting Docker with GPU support enabled for NVIDIA graphics, you may sometimes receive the following error: docker: Error response from daemon: OCI runtime create failed: container_linux.go:349: starting container process caused \"process_linux.go:449: container init caused \\\"process_linux.go:432: running prestart hook 0 caused \\\\\\\"error running hook: exit status 1, stdout: , stderr: nvidia-container-cli: initialization error: cuda error: forward compatibility was attempted on non supported hw\\\\\\\\n\\\\\\\"\\\"\" : unknown. ERROR: Command return non-zero exit code ( see above ) : 125 This usually indicates that a new NVIDIA graphics driver has been installed (usually via apt ) but the system has not yet been restarted. A similar message may appear if the graphics driver is not available, for example because of resuming after suspend. To fix this, restart your system after installing the new NVIDIA driver.","title":"cuda error: forward compatibility was attempted on non supported hw"},{"location":"installation/autoware/docker-installation/#docker-with-nvidia-gpu-fails-to-start-autoware-on-arm64-devices","text":"When starting Docker with GPU support enabled for NVIDIA graphics on arm64 devices, e.g. NVIDIA jetson AGX xavier, you may receive the following error: nvidia@xavier:~$ rocker --nvidia --x11 --user --volume $HOME /autoware -- ghcr.io/autowarefoundation/autoware-universe:latest-arm64 ... Collecting staticx == 0 .12.3 Downloading https://files.pythonhosted.org/packages/92/ff/d9960ea1f9db48d6044a24ee0f3d78d07bcaddf96eb0c0e8806f941fb7d3/staticx-0.12.3.tar.gz ( 68kB ) Complete output from command python setup.py egg_info: Traceback ( most recent call last ) : File \"\" , line 1 , in File \"/tmp/pip-install-m_nm8mya/staticx/setup.py\" , line 4 , in from wheel.bdist_wheel import bdist_wheel ModuleNotFoundError: No module named 'wheel' Command \"python setup.py egg_info\" failed with error code 1 in /tmp/pip-install-m_nm8mya/staticx/ ... This error exists in current version of rocker tool, which relates to the os_detection function of rocker. To fix this error, temporary modification of rocker source code is required, which is not recommended. At current stage, it is recommended to run docker without NVIDIA gpu enabled for arm64 devices: rocker -e LIBGL_ALWAYS_SOFTWARE = 1 --x11 --user --volume $HOME /autoware -- ghcr.io/autowarefoundation/autoware-universe:latest This tutorial will be updated after official fix from rocker.","title":"Docker with NVIDIA gpu fails to start Autoware on arm64 devices"},{"location":"installation/autoware/docker-installation/#tips","text":"","title":"Tips"},{"location":"installation/autoware/docker-installation/#non-native-arm64-system","text":"This section describes a process to run arm64 systems on amd64 systems using qemu-user-static . Initially, your system is usually incompatible with arm64 systems. To check that: $ docker run --rm -t arm64v8/ubuntu uname -m WARNING: The requested image's platform (linux/arm64/v8) does not match the detected host platform (linux/amd64) and no specific platform was requested standard_init_linux.go:228: exec user process caused: exec format error Installing qemu-user-static enables us to run arm64 images on amd64 systems. $ sudo apt-get install qemu-user-static $ docker run --rm --privileged multiarch/qemu-user-static --reset -p yes $ docker run --rm -t arm64v8/ubuntu uname -m WARNING: The requested image's platform (linux/arm64/v8) does not match the detected host platform (linux/amd64) and no specific platform was requested aarch64 To run Autoware's Docker images of arm64 architecture, add the suffix -arm64 . $ docker run --rm -it ghcr.io/autowarefoundation/autoware-universe:latest-arm64 WARNING: The requested image's platform (linux/arm64) does not match the detected host platform (linux/amd64) and no specific platform was requested root@5b71391ad50f:/autoware#","title":"Non-native arm64 System"},{"location":"installation/autoware/source-installation/","text":"Source installation # Prerequisites # Ubuntu 20.04 Git Registering SSH keys to GitHub is preferable. sudo apt-get -y update sudo apt-get -y install git How to set up a development environment # Clone autowarefoundation/autoware and move to the directory. git clone https://github.com/autowarefoundation/autoware.git cd autoware You can install the dependencies either manually or using the provided Ansible script. Note: Before installing NVIDIA libraries, confirm and agree with the licenses. CUDA cuDNN TensorRT Installing dependencies manually # Install ROS2 Install ROS2 Dev Tools Install the RMW Implementation Install pacmod Install Autoware Core dependencies Install Autoware Universe dependencies Install pre-commit dependencies Install Nvidia CUDA Install Nvidia cuDNN and TensorRT Installing dependencies using Ansible # Be very careful with this method. Make sure you read and confirmed all the steps in the Ansible configuration before using it. If you've manually installed the dependencies, you can skip this section. ./setup-dev-env.sh How to set up a workspace # Create the src directory and clone repositories into it. Autoware uses vcstool to construct workspaces. cd autoware mkdir src vcs import src < autoware.repos Install dependent ROS packages. Autoware requires some ROS 2 packages in addition to the core components. The tool rosdep allows an automatic search and installation of such dependencies. You might need to run rosdep update before rosdep install . source /opt/ros/galactic/setup.bash rosdep install -y --from-paths src --ignore-src --rosdistro $ROS_DISTRO Build the workspace. Autoware uses colcon to build workspaces. Refer to the documentation for more advanced options. colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE = Release How to update a workspace # Update the .repos file. cd autoware git pull Update the repositories. vcs import src < autoware.repos vcs pull src For Git users: vcs import is similar to git checkout . Note that it doesn't pull from the remote. vcs pull is similar to git pull . Note that it doesn't switch branches. Refer to the official documentation for more information. Install dependent ROS packages. source /opt/ros/galactic/setup.bash rosdep install -y --from-paths src --ignore-src --rosdistro $ROS_DISTRO Build the workspace. colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE = Release","title":"Source installation"},{"location":"installation/autoware/source-installation/#source-installation","text":"","title":"Source installation"},{"location":"installation/autoware/source-installation/#prerequisites","text":"Ubuntu 20.04 Git Registering SSH keys to GitHub is preferable. sudo apt-get -y update sudo apt-get -y install git","title":"Prerequisites"},{"location":"installation/autoware/source-installation/#how-to-set-up-a-development-environment","text":"Clone autowarefoundation/autoware and move to the directory. git clone https://github.com/autowarefoundation/autoware.git cd autoware You can install the dependencies either manually or using the provided Ansible script. Note: Before installing NVIDIA libraries, confirm and agree with the licenses. CUDA cuDNN TensorRT","title":"How to set up a development environment"},{"location":"installation/autoware/source-installation/#installing-dependencies-manually","text":"Install ROS2 Install ROS2 Dev Tools Install the RMW Implementation Install pacmod Install Autoware Core dependencies Install Autoware Universe dependencies Install pre-commit dependencies Install Nvidia CUDA Install Nvidia cuDNN and TensorRT","title":"Installing dependencies manually"},{"location":"installation/autoware/source-installation/#installing-dependencies-using-ansible","text":"Be very careful with this method. Make sure you read and confirmed all the steps in the Ansible configuration before using it. If you've manually installed the dependencies, you can skip this section. ./setup-dev-env.sh","title":"Installing dependencies using Ansible"},{"location":"installation/autoware/source-installation/#how-to-set-up-a-workspace","text":"Create the src directory and clone repositories into it. Autoware uses vcstool to construct workspaces. cd autoware mkdir src vcs import src < autoware.repos Install dependent ROS packages. Autoware requires some ROS 2 packages in addition to the core components. The tool rosdep allows an automatic search and installation of such dependencies. You might need to run rosdep update before rosdep install . source /opt/ros/galactic/setup.bash rosdep install -y --from-paths src --ignore-src --rosdistro $ROS_DISTRO Build the workspace. Autoware uses colcon to build workspaces. Refer to the documentation for more advanced options. colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE = Release","title":"How to set up a workspace"},{"location":"installation/autoware/source-installation/#how-to-update-a-workspace","text":"Update the .repos file. cd autoware git pull Update the repositories. vcs import src < autoware.repos vcs pull src For Git users: vcs import is similar to git checkout . Note that it doesn't pull from the remote. vcs pull is similar to git pull . Note that it doesn't switch branches. Refer to the official documentation for more information. Install dependent ROS packages. source /opt/ros/galactic/setup.bash rosdep install -y --from-paths src --ignore-src --rosdistro $ROS_DISTRO Build the workspace. colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE = Release","title":"How to update a workspace"},{"location":"installation/related-tools/","text":"Installation of related tools # Warning Under Construction","title":"Installation of related tools"},{"location":"installation/related-tools/#installation-of-related-tools","text":"Warning Under Construction","title":"Installation of related tools"},{"location":"support/","text":"Support # This page explains several support resources. Support guidelines pages explain the support mechanisms and guidelines. Troubleshooting pages explain solutions for common issues. Docs guide pages explain related documentation sites.","title":"Support"},{"location":"support/#support","text":"This page explains several support resources. Support guidelines pages explain the support mechanisms and guidelines. Troubleshooting pages explain solutions for common issues. Docs guide pages explain related documentation sites.","title":"Support"},{"location":"support/docs-guide/","text":"Docs guide # This page explains several documentation sites that are useful for Autoware and ROS development. The Autoware Foundation is the official site of the Autoware Foundation. You can learn about the Autoware community here. Autoware Documentation (this site) is the central documentation site for Autoware maintained by the Autoware community. General software-related information of Autoware is aggregated here. Autoware Universe Documentation has READMEs and design documents of software components. ROS Docs Guide explains the ROS 1 and ROS 2 documentation infrastructure.","title":"Docs guide"},{"location":"support/docs-guide/#docs-guide","text":"This page explains several documentation sites that are useful for Autoware and ROS development. The Autoware Foundation is the official site of the Autoware Foundation. You can learn about the Autoware community here. Autoware Documentation (this site) is the central documentation site for Autoware maintained by the Autoware community. General software-related information of Autoware is aggregated here. Autoware Universe Documentation has READMEs and design documents of software components. ROS Docs Guide explains the ROS 1 and ROS 2 documentation infrastructure.","title":"Docs guide"},{"location":"support/support-guidelines/","text":"Support guidelines # This page explains the support mechanisms we provide. Warning Before asking for help, search and read this documentation site carefully. Also, follow the discussion guidelines for discussions. Choose appropriate resources depending on what kind of help you need and read the detailed description in the sections below. Documentation sites Various information GitHub Discussions Questions Unconfirmed bugs Feature requests Design discussions GitHub Issues Confirmed bugs Discord Instant messaging between contributors ROS Discourse General topics that should be widely announced Documentation sites # Docs guide shows the list of useful documentation sites. Visit them and see if there is any information related to your problem. Note that the documentation sites aren't always up-to-date and perfect. If you find out that some information is wrong, unclear, or missing in Autoware docs, feel free to submit a pull request following our contribution guidelines . Warning Since this documentation site is still under construction, there are some empty pages. GitHub Discussions # If you encounter a problem with Autoware, check existing issues and questions and search for similar issues first. Issues Note that Autoware has multiple repositories listed in autoware.repos . It is recommended to search across the repositories. Questions If no answer was found, create a new question thread here . If your question is not answered within a week, then @mention the maintainers to remind them. Also, there are other discussion types such as feature requests or design discussions . Feel free to open or join such discussions. GitHub Issues # If you have a problem and you have confirmed it is a bug, find the appropriate repository and create a new issue there. If you can't determine the appropriate repository, ask the maintainers for help by creating a new discussion in the Q&A category . Warning Do not create issues for questions or unconfirmed bugs. If such issues are created, maintainers will transfer them to GitHub Discussions. If you want to fix the bug by yourself, discuss the approach with maintainers and submit a pull request. Discord # Autoware has a Discord server for casual communication between contributors. The Autoware Discord server is a good place for the following activities: Introduce yourself to the community. Chat with contributors. Take a quick straw poll. Note that it is not the right place to get help for your issues. ROS Discourse # If you want to widely discuss a topic with the general Autoware and ROS community or ask a question not related to Autoware's bugs, post to the Autoware category on ROS Discourse . Warning Do not post questions about bugs to ROS Discourse!","title":"Support guidelines"},{"location":"support/support-guidelines/#support-guidelines","text":"This page explains the support mechanisms we provide. Warning Before asking for help, search and read this documentation site carefully. Also, follow the discussion guidelines for discussions. Choose appropriate resources depending on what kind of help you need and read the detailed description in the sections below. Documentation sites Various information GitHub Discussions Questions Unconfirmed bugs Feature requests Design discussions GitHub Issues Confirmed bugs Discord Instant messaging between contributors ROS Discourse General topics that should be widely announced","title":"Support guidelines"},{"location":"support/support-guidelines/#documentation-sites","text":"Docs guide shows the list of useful documentation sites. Visit them and see if there is any information related to your problem. Note that the documentation sites aren't always up-to-date and perfect. If you find out that some information is wrong, unclear, or missing in Autoware docs, feel free to submit a pull request following our contribution guidelines . Warning Since this documentation site is still under construction, there are some empty pages.","title":"Documentation sites"},{"location":"support/support-guidelines/#github-discussions","text":"If you encounter a problem with Autoware, check existing issues and questions and search for similar issues first. Issues Note that Autoware has multiple repositories listed in autoware.repos . It is recommended to search across the repositories. Questions If no answer was found, create a new question thread here . If your question is not answered within a week, then @mention the maintainers to remind them. Also, there are other discussion types such as feature requests or design discussions . Feel free to open or join such discussions.","title":"GitHub Discussions"},{"location":"support/support-guidelines/#github-issues","text":"If you have a problem and you have confirmed it is a bug, find the appropriate repository and create a new issue there. If you can't determine the appropriate repository, ask the maintainers for help by creating a new discussion in the Q&A category . Warning Do not create issues for questions or unconfirmed bugs. If such issues are created, maintainers will transfer them to GitHub Discussions. If you want to fix the bug by yourself, discuss the approach with maintainers and submit a pull request.","title":"GitHub Issues"},{"location":"support/support-guidelines/#discord","text":"Autoware has a Discord server for casual communication between contributors. The Autoware Discord server is a good place for the following activities: Introduce yourself to the community. Chat with contributors. Take a quick straw poll. Note that it is not the right place to get help for your issues.","title":"Discord"},{"location":"support/support-guidelines/#ros-discourse","text":"If you want to widely discuss a topic with the general Autoware and ROS community or ask a question not related to Autoware's bugs, post to the Autoware category on ROS Discourse . Warning Do not post questions about bugs to ROS Discourse!","title":"ROS Discourse"},{"location":"support/troubleshooting/","text":"Troubleshooting # Setup issues # CUDA-related errors # When installing CUDA, errors may occur because of version conflicts. To resolve these types of errors, try one of the following methods: Unhold all CUDA-related libraries and rerun the setup script. sudo apt-mark unhold \\ \"cuda*\" \\ \"libcudnn*\" \\ \"libnvinfer*\" \\ \"libnvonnxparsers*\" \\ \"libnvparsers*\" \\ \"nvidia*\" ./setup-dev-env.sh Uninstall all CUDA-related libraries and rerun the setup script. sudo apt purge \\ \"cuda*\" \\ \"libcudnn*\" \\ \"libnvinfer*\" \\ \"libnvonnxparsers*\" \\ \"libnvparsers*\" \\ \"nvidia*\" sudo apt autoremove ./setup-dev-env.sh Warning Note that this may break your system and run carefully. Run the setup script without installing CUDA-related libraries. ./setup-dev-env.sh --no-nvidia Warning Note that some components in Autoware Universe require CUDA, and only the CUDA version in the env file is supported at this time. Autoware may work with other CUDA versions, but those versions are not supported and functionality is not guaranteed. Build issues # Insufficient memory # Building Autoware requires a lot of memory, and your machine can freeze or crash if memory runs out during a build. To avoid this problem, 16-32GB of swap should be configured. # Optional: Check the current swapfile free -h # Remove the current swapfile sudo swapoff /swapfile sudo rm /swapfile # Create a new swapfile sudo fallocate -l 32G /swapfile sudo chmod 600 /swapfile sudo mkswap /swapfile sudo swapon /swapfile # Optional: Check if the change is reflected free -h For more detailed configuration steps, along with an explanation of swap, refer to Digital Ocean's \"How To Add Swap Space on Ubuntu 20.04\" tutorial Errors when using the latest version of Autoware # If you are working with the latest version of Autoware, issues can occur due to out-of-date software or old build files. To resolve these types of problems, first try cleaning your build artifacts and rebuilding: rm -rf build/ install/ log/ colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE = Release If the error is not resolved, remove src/ and update your workspace according to installation type ( Docker / source ). Warning Before removing src/ , confirm that there are no modifications in your local environment that you want to keep! If errors still persist after trying the steps above, delete the entire workspace, clone the repository once again and restart the installation process. rm -rf autoware/ git clone https://github.com/autowarefoundation/autoware.git Errors when using a fixed version of Autoware # In principle, errors should not occur when using a fixed version. That said, possible causes include: ROS 2 has been updated with breaking changes. For confirmation, check the Packaging and Release Management tag on ROS Discourse. Your local environment is broken. Confirm your .bashrc file, environment variables, and library versions. In addition to the causes listed above, there are two common misunderstandings around the use of fixed versions. You used a fixed version for autowarefoundation/autoware only. All of the repository versions in the .repos file must be specified in order to use a completely fixed version. You didn't update the workspace after changing the branch of autowarefoundation/autoware . Changing the branch of autowarefoundation/autoware does not affect the files under src/ . You have to run the vcs import command to update them. Docker/rocker issues # If any errors occur when running Autoware with Docker or rocker, first confirm that your Docker installation is working correctly by running the following commands: docker run --rm -it hello-world docker run --rm -it ubuntu:latest Next, confirm that you are able to access the base Autoware image that is stored on the GitHub Packages website docker run --rm -it ghcr.io/autowarefoundation/autoware-universe:latest Runtime errors # Map does not display when running the Planning Simulator # When running the Planning Simulator, the most common reason for the map not being displayed in RViz is because the map path has not been specified correctly in the launch command . You can confirm if this is the case by searching for Could not find lanelet map under {path-to-map-dir}/lanelet2_map.osm errors in the log. Another possible reason is that map loading is taking a long time due to poor DDS performance. To address this issue, first enable localhost-only communication to reduce network traffic, and then tune DDS settings if the problem continues to occur. Enable localhost-only communication Tune DDS settings Add the following lines to /etc/sysctl.conf net.ipv4.ipfrag_time = 3 // generic DDS setting net.ipv4.ipfrag_high_thresh = 134217728 // generic DDS setting net.core.rmem_max = 2147483647 // only add if CycloneDDS is configured net.core.rmem_default = 8388608 // only add if CycloneDDS is confgured Note DDS configuration can be determined by running the following command. echo $RMW_IMPLEMENTATION // if Cyclone DDS is configured, this command will return \"rmw_cyclonedds_cpp\"","title":"Troubleshooting"},{"location":"support/troubleshooting/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"support/troubleshooting/#setup-issues","text":"","title":"Setup issues"},{"location":"support/troubleshooting/#cuda-related-errors","text":"When installing CUDA, errors may occur because of version conflicts. To resolve these types of errors, try one of the following methods: Unhold all CUDA-related libraries and rerun the setup script. sudo apt-mark unhold \\ \"cuda*\" \\ \"libcudnn*\" \\ \"libnvinfer*\" \\ \"libnvonnxparsers*\" \\ \"libnvparsers*\" \\ \"nvidia*\" ./setup-dev-env.sh Uninstall all CUDA-related libraries and rerun the setup script. sudo apt purge \\ \"cuda*\" \\ \"libcudnn*\" \\ \"libnvinfer*\" \\ \"libnvonnxparsers*\" \\ \"libnvparsers*\" \\ \"nvidia*\" sudo apt autoremove ./setup-dev-env.sh Warning Note that this may break your system and run carefully. Run the setup script without installing CUDA-related libraries. ./setup-dev-env.sh --no-nvidia Warning Note that some components in Autoware Universe require CUDA, and only the CUDA version in the env file is supported at this time. Autoware may work with other CUDA versions, but those versions are not supported and functionality is not guaranteed.","title":"CUDA-related errors"},{"location":"support/troubleshooting/#build-issues","text":"","title":"Build issues"},{"location":"support/troubleshooting/#insufficient-memory","text":"Building Autoware requires a lot of memory, and your machine can freeze or crash if memory runs out during a build. To avoid this problem, 16-32GB of swap should be configured. # Optional: Check the current swapfile free -h # Remove the current swapfile sudo swapoff /swapfile sudo rm /swapfile # Create a new swapfile sudo fallocate -l 32G /swapfile sudo chmod 600 /swapfile sudo mkswap /swapfile sudo swapon /swapfile # Optional: Check if the change is reflected free -h For more detailed configuration steps, along with an explanation of swap, refer to Digital Ocean's \"How To Add Swap Space on Ubuntu 20.04\" tutorial","title":"Insufficient memory"},{"location":"support/troubleshooting/#errors-when-using-the-latest-version-of-autoware","text":"If you are working with the latest version of Autoware, issues can occur due to out-of-date software or old build files. To resolve these types of problems, first try cleaning your build artifacts and rebuilding: rm -rf build/ install/ log/ colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE = Release If the error is not resolved, remove src/ and update your workspace according to installation type ( Docker / source ). Warning Before removing src/ , confirm that there are no modifications in your local environment that you want to keep! If errors still persist after trying the steps above, delete the entire workspace, clone the repository once again and restart the installation process. rm -rf autoware/ git clone https://github.com/autowarefoundation/autoware.git","title":"Errors when using the latest version of Autoware"},{"location":"support/troubleshooting/#errors-when-using-a-fixed-version-of-autoware","text":"In principle, errors should not occur when using a fixed version. That said, possible causes include: ROS 2 has been updated with breaking changes. For confirmation, check the Packaging and Release Management tag on ROS Discourse. Your local environment is broken. Confirm your .bashrc file, environment variables, and library versions. In addition to the causes listed above, there are two common misunderstandings around the use of fixed versions. You used a fixed version for autowarefoundation/autoware only. All of the repository versions in the .repos file must be specified in order to use a completely fixed version. You didn't update the workspace after changing the branch of autowarefoundation/autoware . Changing the branch of autowarefoundation/autoware does not affect the files under src/ . You have to run the vcs import command to update them.","title":"Errors when using a fixed version of Autoware"},{"location":"support/troubleshooting/#dockerrocker-issues","text":"If any errors occur when running Autoware with Docker or rocker, first confirm that your Docker installation is working correctly by running the following commands: docker run --rm -it hello-world docker run --rm -it ubuntu:latest Next, confirm that you are able to access the base Autoware image that is stored on the GitHub Packages website docker run --rm -it ghcr.io/autowarefoundation/autoware-universe:latest","title":"Docker/rocker issues"},{"location":"support/troubleshooting/#runtime-errors","text":"","title":"Runtime errors"},{"location":"support/troubleshooting/#map-does-not-display-when-running-the-planning-simulator","text":"When running the Planning Simulator, the most common reason for the map not being displayed in RViz is because the map path has not been specified correctly in the launch command . You can confirm if this is the case by searching for Could not find lanelet map under {path-to-map-dir}/lanelet2_map.osm errors in the log. Another possible reason is that map loading is taking a long time due to poor DDS performance. To address this issue, first enable localhost-only communication to reduce network traffic, and then tune DDS settings if the problem continues to occur. Enable localhost-only communication Tune DDS settings Add the following lines to /etc/sysctl.conf net.ipv4.ipfrag_time = 3 // generic DDS setting net.ipv4.ipfrag_high_thresh = 134217728 // generic DDS setting net.core.rmem_max = 2147483647 // only add if CycloneDDS is configured net.core.rmem_default = 8388608 // only add if CycloneDDS is confgured Note DDS configuration can be determined by running the following command. echo $RMW_IMPLEMENTATION // if Cyclone DDS is configured, this command will return \"rmw_cyclonedds_cpp\"","title":"Map does not display when running the Planning Simulator"},{"location":"tutorials/","text":"Tutorials # This page explains how to try out Autoware through simulations. There are some methods and types of simulations. Read the following sections and choose a simulation method/type you want See the left sidebar for how to run each simulation. Warning The namings of each simulation are under discussion and would be changed in the near future. Simulation methods # Ad hoc simulation # Ad hoc simulation is a simulation method that you run simulations flexibly on your local machine. It is recommended for your first trial. Scenario simulation # Scenario simulation is a simulation method that a scenario runner runs simulations based on scenarios you defined. It is often run automatically on a CI system, but you can also run this simulation on your local machine. Simulation types # Autoware supports three types of simulations. Note that it is just a rough classification, and that there are several minor derivative versions. Planning simulation # Planning simulation is a simulation type that uses simple dummy data and tests mainly planning/control components. Rosbag replay simulation # Rosbag replay simulation is a simulation type that uses Rosbag data and tests mainly perception modules. Sometimes it is used for endurance tests by repeatedly playing back the data. Digital twin simulation # Digital twin simulation is a simulation type that produces realistic data and simulate almost the entire system.","title":"Tutorials"},{"location":"tutorials/#tutorials","text":"This page explains how to try out Autoware through simulations. There are some methods and types of simulations. Read the following sections and choose a simulation method/type you want See the left sidebar for how to run each simulation. Warning The namings of each simulation are under discussion and would be changed in the near future.","title":"Tutorials"},{"location":"tutorials/#simulation-methods","text":"","title":"Simulation methods"},{"location":"tutorials/#ad-hoc-simulation","text":"Ad hoc simulation is a simulation method that you run simulations flexibly on your local machine. It is recommended for your first trial.","title":"Ad hoc simulation"},{"location":"tutorials/#scenario-simulation","text":"Scenario simulation is a simulation method that a scenario runner runs simulations based on scenarios you defined. It is often run automatically on a CI system, but you can also run this simulation on your local machine.","title":"Scenario simulation"},{"location":"tutorials/#simulation-types","text":"Autoware supports three types of simulations. Note that it is just a rough classification, and that there are several minor derivative versions.","title":"Simulation types"},{"location":"tutorials/#planning-simulation","text":"Planning simulation is a simulation type that uses simple dummy data and tests mainly planning/control components.","title":"Planning simulation"},{"location":"tutorials/#rosbag-replay-simulation","text":"Rosbag replay simulation is a simulation type that uses Rosbag data and tests mainly perception modules. Sometimes it is used for endurance tests by repeatedly playing back the data.","title":"Rosbag replay simulation"},{"location":"tutorials/#digital-twin-simulation","text":"Digital twin simulation is a simulation type that produces realistic data and simulate almost the entire system.","title":"Digital twin simulation"},{"location":"tutorials/Simulating-Autoware/","text":"Ad hoc simulation # Warning Under Construction","title":"Ad hoc simulation"},{"location":"tutorials/Simulating-Autoware/#ad-hoc-simulation","text":"Warning Under Construction","title":"Ad hoc simulation"},{"location":"tutorials/Simulating-Autoware/using-a-digital-twin-simulation/","text":"Using a digital twin simulation # Warning Under Construction","title":"Using a digital twin simulation"},{"location":"tutorials/Simulating-Autoware/using-a-digital-twin-simulation/#using-a-digital-twin-simulation","text":"Warning Under Construction","title":"Using a digital twin simulation"},{"location":"tutorials/Simulating-Autoware/using-a-planning-simulation/","text":"Using a planning simulation # Preparation # Download and unpack a sample map. Click here to download. Unpack it by running the following command. unzip -d ~/Downloads/ ~/Downloads/sample-map-planning.zip Note # Sample map: Copyright 2020 TIER IV, Inc. How to run a planning simulation # Launch Autoware. source ~/autoware/install/setup.bash ros2 launch autoware_launch planning_simulator.launch.xml map_path: = $HOME /Downloads/sample-map-planning vehicle_model: = sample_vehicle sensor_model: = sample_sensor_kit Note that you cannot use ~ instead of $HOME here. Set an initial pose for the ego vehicle. a) Click the 2D Pose estimate button in the toolbar, or hit the P key b) In the 3D View pane, click and hold the left-mouse button, and then drag to set the direction for the initial pose. Set a goal pose for the ego vehicle. a) Click the 2D Nav Goal button in the toolbar, or hit the G key b) In the 3D View pane, click and hold the left-mouse button, and then drag to set the direction for the goal pose. To place a dummy object such as a pedestrian, click the 2D Dummy Pedestrian button in the toolbar. Engage the ego vehicle. source ~/autoware/install/setup.bash ros2 topic pub /autoware/engage autoware_auto_vehicle_msgs/msg/Engage \"engage: true\" -1 To delete objects, click the Delete All Objects button in the toolbar. After that, the vehicle will restart driving and reach the goal. How to simulate parking maneuvers # Set an initial pose and a goal pose, and engage the ego vehicle. When the vehicle approaches the goal, it will change to the parking mode. After that, the vehicle will start driving backwards and park at the destination parking spot.","title":"Using a planning simulation"},{"location":"tutorials/Simulating-Autoware/using-a-planning-simulation/#using-a-planning-simulation","text":"","title":"Using a planning simulation"},{"location":"tutorials/Simulating-Autoware/using-a-planning-simulation/#preparation","text":"Download and unpack a sample map. Click here to download. Unpack it by running the following command. unzip -d ~/Downloads/ ~/Downloads/sample-map-planning.zip","title":"Preparation"},{"location":"tutorials/Simulating-Autoware/using-a-planning-simulation/#note","text":"Sample map: Copyright 2020 TIER IV, Inc.","title":"Note"},{"location":"tutorials/Simulating-Autoware/using-a-planning-simulation/#how-to-run-a-planning-simulation","text":"Launch Autoware. source ~/autoware/install/setup.bash ros2 launch autoware_launch planning_simulator.launch.xml map_path: = $HOME /Downloads/sample-map-planning vehicle_model: = sample_vehicle sensor_model: = sample_sensor_kit Note that you cannot use ~ instead of $HOME here. Set an initial pose for the ego vehicle. a) Click the 2D Pose estimate button in the toolbar, or hit the P key b) In the 3D View pane, click and hold the left-mouse button, and then drag to set the direction for the initial pose. Set a goal pose for the ego vehicle. a) Click the 2D Nav Goal button in the toolbar, or hit the G key b) In the 3D View pane, click and hold the left-mouse button, and then drag to set the direction for the goal pose. To place a dummy object such as a pedestrian, click the 2D Dummy Pedestrian button in the toolbar. Engage the ego vehicle. source ~/autoware/install/setup.bash ros2 topic pub /autoware/engage autoware_auto_vehicle_msgs/msg/Engage \"engage: true\" -1 To delete objects, click the Delete All Objects button in the toolbar. After that, the vehicle will restart driving and reach the goal.","title":"How to run a planning simulation"},{"location":"tutorials/Simulating-Autoware/using-a-planning-simulation/#how-to-simulate-parking-maneuvers","text":"Set an initial pose and a goal pose, and engage the ego vehicle. When the vehicle approaches the goal, it will change to the parking mode. After that, the vehicle will start driving backwards and park at the destination parking spot.","title":"How to simulate parking maneuvers"},{"location":"tutorials/Simulating-Autoware/using-a-rosbag-replay-simulation/","text":"Using a rosbag replay simulation # Steps # Download and unpack a sample map. Click here to download. Unpack it by running the following command. unzip -d ~/Downloads/ ~/Downloads/sample-map-rosbag.zip Download the sample rosbag files. Click here to download. Unpack it by running the following command. unzip -d ~/Downloads/ ~/Downloads/sample-rosbag.zip Note # Sample map and rosbag: Copyright 2020 TIER IV, Inc. Due to privacy concerns, the rosbag does not contain image data, which will cause: Traffic light recognition functionality cannot be tested with this sample rosbag. Object detection accuracy is decreased. How to run a rosbag replay simulation # Launch Autoware. source ~/autoware/install/setup.bash ros2 launch autoware_launch logging_simulator.launch.xml map_path: = $HOME /Downloads/sample-map-rosbag vehicle_model: = sample_vehicle sensor_model: = sample_sensor_kit Note that you cannot use ~ instead of $HOME here. Play the sample rosbag file. source ~/autoware/install/setup.bash ros2 bag play ~/Downloads/sample-rosbag/sample.db3 -r 0 .2 To focus the view on the ego vehicle, change the Target Frame in the RViz Views panel from viewer to base_link . To switch the view to Third Person Follower etc, change the Type in the RViz Views panel.","title":"Using a rosbag replay simulation"},{"location":"tutorials/Simulating-Autoware/using-a-rosbag-replay-simulation/#using-a-rosbag-replay-simulation","text":"","title":"Using a rosbag replay simulation"},{"location":"tutorials/Simulating-Autoware/using-a-rosbag-replay-simulation/#steps","text":"Download and unpack a sample map. Click here to download. Unpack it by running the following command. unzip -d ~/Downloads/ ~/Downloads/sample-map-rosbag.zip Download the sample rosbag files. Click here to download. Unpack it by running the following command. unzip -d ~/Downloads/ ~/Downloads/sample-rosbag.zip","title":"Steps"},{"location":"tutorials/Simulating-Autoware/using-a-rosbag-replay-simulation/#note","text":"Sample map and rosbag: Copyright 2020 TIER IV, Inc. Due to privacy concerns, the rosbag does not contain image data, which will cause: Traffic light recognition functionality cannot be tested with this sample rosbag. Object detection accuracy is decreased.","title":"Note"},{"location":"tutorials/Simulating-Autoware/using-a-rosbag-replay-simulation/#how-to-run-a-rosbag-replay-simulation","text":"Launch Autoware. source ~/autoware/install/setup.bash ros2 launch autoware_launch logging_simulator.launch.xml map_path: = $HOME /Downloads/sample-map-rosbag vehicle_model: = sample_vehicle sensor_model: = sample_sensor_kit Note that you cannot use ~ instead of $HOME here. Play the sample rosbag file. source ~/autoware/install/setup.bash ros2 bag play ~/Downloads/sample-rosbag/sample.db3 -r 0 .2 To focus the view on the ego vehicle, change the Target Frame in the RViz Views panel from viewer to base_link . To switch the view to Third Person Follower etc, change the Type in the RViz Views panel.","title":"How to run a rosbag replay simulation"},{"location":"tutorials/running-scenario-test/running-a-scenario-test-with-the-digital-twin-simulation/","text":"Running a scenario test with the digital twin simulation # Warning Under Construction","title":"Running a scenario test with the digital twin simulation"},{"location":"tutorials/running-scenario-test/running-a-scenario-test-with-the-digital-twin-simulation/#running-a-scenario-test-with-the-digital-twin-simulation","text":"Warning Under Construction","title":"Running a scenario test with the digital twin simulation"},{"location":"tutorials/running-scenario-test/running-a-scenario-test-with-the-rosbag-replay-simulation/","text":"Running a scenario test with the rosbag replay simulation # Warning Under Construction","title":"Running a scenario test with the rosbag replay simulation"},{"location":"tutorials/running-scenario-test/running-a-scenario-test-with-the-rosbag-replay-simulation/#running-a-scenario-test-with-the-rosbag-replay-simulation","text":"Warning Under Construction","title":"Running a scenario test with the rosbag replay simulation"},{"location":"tutorials/running-scenario-test/running-a-scenario-test-with-the-planning-simulation/installation/","text":"Installation # This document contains step-by-step instruction on how to build AWF Autoware Core/Universe with scenario_simulator_v2 . Prerequisites # Autoware has been built and installed How to build # Navigate to the Autoware workspace: cd autoware Import Simulator dependencies: vcs import src < simulator.repos Install dependent ROS packages: source /opt/ros/galactic/setup.bash rosdep install --from-paths src --ignore-src --rosdistro $ROS_DISTRO Build the workspace: colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE = Release","title":"Installation"},{"location":"tutorials/running-scenario-test/running-a-scenario-test-with-the-planning-simulation/installation/#installation","text":"This document contains step-by-step instruction on how to build AWF Autoware Core/Universe with scenario_simulator_v2 .","title":"Installation"},{"location":"tutorials/running-scenario-test/running-a-scenario-test-with-the-planning-simulation/installation/#prerequisites","text":"Autoware has been built and installed","title":"Prerequisites"},{"location":"tutorials/running-scenario-test/running-a-scenario-test-with-the-planning-simulation/installation/#how-to-build","text":"Navigate to the Autoware workspace: cd autoware Import Simulator dependencies: vcs import src < simulator.repos Install dependent ROS packages: source /opt/ros/galactic/setup.bash rosdep install --from-paths src --ignore-src --rosdistro $ROS_DISTRO Build the workspace: colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE = Release","title":"How to build"},{"location":"tutorials/running-scenario-test/running-a-scenario-test-with-the-planning-simulation/random-test-simulation/","text":"Random test simulation # Note Running the Scenario Simulator requires some additional steps on top of building and installing Autoware, so make sure that Scenario Simulator installation has been completed first before proceeding. Running steps # Move to the workspace directory where Autoware and the Scenario Simulator have been built. Source the workspace setup script: source install/setup.bash Run the simulation: ros2 launch random_test_runner random_test.launch.py \\ architecture_type: = awf/universe \\ sensor_model: = sample_sensor_kit \\ vehicle_model: = sample_vehicle For more information about supported parameters, refer to the ![random_test_runner documentation].( https://github.com/tier4/scenario_simulator_v2/blob/master/test_runner/random_test_runner/Readme.md#node-parameters )","title":"Random test simulation"},{"location":"tutorials/running-scenario-test/running-a-scenario-test-with-the-planning-simulation/random-test-simulation/#random-test-simulation","text":"Note Running the Scenario Simulator requires some additional steps on top of building and installing Autoware, so make sure that Scenario Simulator installation has been completed first before proceeding.","title":"Random test simulation"},{"location":"tutorials/running-scenario-test/running-a-scenario-test-with-the-planning-simulation/random-test-simulation/#running-steps","text":"Move to the workspace directory where Autoware and the Scenario Simulator have been built. Source the workspace setup script: source install/setup.bash Run the simulation: ros2 launch random_test_runner random_test.launch.py \\ architecture_type: = awf/universe \\ sensor_model: = sample_sensor_kit \\ vehicle_model: = sample_vehicle For more information about supported parameters, refer to the ![random_test_runner documentation].( https://github.com/tier4/scenario_simulator_v2/blob/master/test_runner/random_test_runner/Readme.md#node-parameters )","title":"Running steps"},{"location":"tutorials/running-scenario-test/running-a-scenario-test-with-the-planning-simulation/scenario-test-simulation/","text":"Scenario test simulation # Note Running the Scenario Simulator requires some additional steps on top of building and installing Autoware, so make sure that Scenario Simulator installation has been completed first before proceeding. Running steps # Move to the workspace directory where Autoware and the Scenario Simulator have been built. Source the workspace setup script: source install/setup.bash Run the simulation: ros2 launch scenario_test_runner scenario_test_runner.launch.py \\ architecture_type: = awf/universe \\ record: = false \\ scenario: = '$(find-pkg-share scenario_test_runner)/scenario/sample.yaml' \\ sensor_model: = sample_sensor_kit \\ vehicle_model: = sample_vehicle","title":"Scenario test simulation"},{"location":"tutorials/running-scenario-test/running-a-scenario-test-with-the-planning-simulation/scenario-test-simulation/#scenario-test-simulation","text":"Note Running the Scenario Simulator requires some additional steps on top of building and installing Autoware, so make sure that Scenario Simulator installation has been completed first before proceeding.","title":"Scenario test simulation"},{"location":"tutorials/running-scenario-test/running-a-scenario-test-with-the-planning-simulation/scenario-test-simulation/#running-steps","text":"Move to the workspace directory where Autoware and the Scenario Simulator have been built. Source the workspace setup script: source install/setup.bash Run the simulation: ros2 launch scenario_test_runner scenario_test_runner.launch.py \\ architecture_type: = awf/universe \\ record: = false \\ scenario: = '$(find-pkg-share scenario_test_runner)/scenario/sample.yaml' \\ sensor_model: = sample_sensor_kit \\ vehicle_model: = sample_vehicle","title":"Running steps"}]}